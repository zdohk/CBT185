TSUB     TITLE 'TSUB - MAINTAIN LWA-POINTED-TO INCORE TSO AUTH TABLES'
         SPACE 1
***********************************************************************
*                                                                     *
*   Program Name:   TSUB                                              *
*                                                                     *
*  Documentation:   This program is meant to be run as a TSO          *
*                   command, APF authorized except for the display    *
*                   functions.                                        *
*                                                                     *
*    Environment:   TSO command, APF Authorized.                      *
*                   PUTLINE interface enabled by APUT, EPUTL.         *
*                   This program is non-reentrant.                    *
*                                                                     *
* Short Function:   This program deals with existing TSO "auth"       *
*                   tables that are pointed to by fields in the       *
*                   LWA (Logon Work Area) which is created for a      *
*                   TSO session at LOGON time.  These tables are      *
*                   the actual tables that your TSO session uses      *
*                   to determine program authorization.  Many of      *
*                   the characteristics of these tables can be        *
*                   changed or reset by the TSUB program.  The        *
*                   changes that TSUB can do, are of two types:       *
*                                                                     *
*                   1.  Replacing or blanking any table entry.        *
*                   2.  Altering the LWA flags or fields that         *
*                       determine this table's properties.            *
*                                                                     *
*                Details:                                             *
*                                                                     *
*                   1.  TSUB can substitute a different program name  *
*                       or insert a blank entry into any valid slot   *
*                       of a TSO "auth" table that belongs to your    *
*                       TSO session.                                  *
*                                                                     *
*                       Blanking (not the last entry) is dangerous    *
*                       (see below) because it invalidates all the    *
*                       subsequent non-blank table entries.  But the  *
*                       technique of blanking an entry can be used    *
*                       carefully if you are sure of what you want    *
*                       to accomplish.                                *
*                                                                     *
*                   2.  TSUB can change the characteristics of your   *
*                       own session's TSO "auth" tables, that are     *
*                       pointed to by the LWA, by means of changing   *
*                       the LWA (Logon Work Area) settings for each   *
*                       table.  For example, LWA table lengths can    *
*                       be supplied or removed.  LWA flags marking    *
*                       the table as coming from a STEPLIB can be     *
*                       set, or removed.  Even the physical table     *
*                       header can be altered to make the table       *
*                       look as though it came from PARMLIB.          *
*                                                                     *
*   Introduction:   At LOGON time for a TSO session, the system       *
*                   copies a set of the E2, E8, AP, and NS TSO        *
*                   authorization tables into SP 252 protected Key 0  *
*                   storage which lies in the TSO user's address      *
*                   space.  These are the tables WHICH ARE ACTUALLY   *
*                   USED by that TSO session, and their location is   *
*                   pointed to in the LWA control block (Logon Work   *
*                   Area).  The duration of these tables is for the   *
*                   life of that TSO session.  TSO LOGON processing   *
*                   creates both the LWA itself, and the copies of    *
*                   the auth tables that are used. TSUB displays and  *
*                   manipulates this copy of these tables--the ones   *
*                   that are actually in use. Thus, changes to these  *
*                   tables are effective immediately, and their       *
*                   scope affects only the issuing TSO session.       *
*                                                                     *
*                   Where does TSO get these tables from, at LOGON    *
*                   time?                                             *
*                                                                     *
*              Case 1.  The most commonly found source for the auth   *
*                       tables pointed to in the LWA, is the "common  *
*                       storage" tables created from the active       *
*                       PARMLIB member IKJTSOxx.  Those are pointed   *
*                       to by the TPVT control block + X'14' which    *
*                       is the CTLT.  If the CTLT is the source of    *
*                       the LWA tables, then lengths of the tables,   *
*                       and the size of each entry, are copied from   *
*                       the CTLT into the LWA (Logon Work Area).      *
*                       Use the program called ASUB to directly       *
*                       access the public tables from PARMLIB that    *
*                       are pointed to by the CTLT (undocumented)     *
*                       control block.  Our program, TSUB, accesses   *
*                       the copy of those tables which is pointed to  *
*                       by the LWA, which were created for the TSO    *
*                       session at LOGON time, and which are unique   *
*                       to the current TSO session.                   *
*                                                                     *
*              Case 2.  If a list of table entries for one or more    *
*                       of the tables:  E2, E8, AP, or NS is not      *
*                       found in the IKJTSOxx PARMLIB member that     *
*                       is currently active, then the table in the    *
*                       LWA is not copied from the IKJTABLS module    *
*                       in LPALIB, but it is just pointed to.  Thus   *
*                       in such a situation, TSUB cannot alter the    *
*                       particular table.  The actual table is        *
*                       located in PLPA, in that particular case.     *
*                                                                     *
*              Case 3.  If a copy of the IKJTABLS load module         *
*                       containing csects IKJEFTE2, IKJEFTE8,         *
*                       IKJEFTAP, and IKJEFTNS is found in an         *
*                       APF-authorized STEPLIB that the TSO session   *
*                       has access to (running as an APF authorized   *
*                       STEPLIB only), then those E2, E8, NS, and AP  *
*                       tables are copied into the LWA at LOGON       *
*                       time, from that CSECT in the STEPLIB copy of  *
*                       IKJTABLS.  Therefore the table entries in     *
*                       the respective CSECTs of the IKJTABLS in the  *
*                       authorized STEPLIB are the ones which are in  *
*                       force for that user's TSO session.  But in    *
*                       that case, no "table lengths" or "number of   *
*                       table entries" from these tables, are         *
*                       available.  The table is delimited by the     *
*                       first blank entry in it.  This TSUB program   *
*                       has the ability to blank any numbered table   *
*                       entry.  Since a blank entry is a delimiter    *
*                       for the entire table, and all entries after   *
*                       the blank entry are no longer used, you       *
*                       have to be very careful.  Therefore, when     *
*                       blanking entries, you should usually blank    *
*                       the last one only, unless you have a very     *
*                       good reason to blank out a different entry,   *
*                       other than the last one.  The good news is    *
*                       that the effect of the TSUB program only      *
*                       lasts for the duration of this LOGON, and     *
*                       only for the userid that is currently running *
*                       the TSUB program.                             *
*                                                                     *
*            Note - Tables copied from a CSECT in IKJTABLS do not     *
*                   have lengths associated with them.  They are      *
*                   delimited by a blank table entry at the end.      *
*                   Therefore the copy of each such table pointed     *
*                   to by the LWA, does not have any length           *
*                   associated with it.  Therefore we can only        *
*                   judge its length by looking at the first blank    *
*                   entry that has been found by a forward scan.      *
*                                                                     *
*                   This program, TSUB, directly manipulates the      *
*                   "live" authorization tables pointed to by the     *
*                   LWA.  Supported tables are:  E2, E2, NS and       *
*                   AP.  The public PP (Platform Program) table       *
*                   and PC (Platform Command) table, not in the       *
*                   LWA, are also supported by this program, if       *
*                   they had been created by their presence in the    *
*                   active IKJTSOxx PARMLIB member.                   *
*                                                                     *
*    Description:   Display an Auth Table entry from any of the       *
*                   TSO/E program list tables:  IKJEFTE2, IKJEFTE8,   *
*                   IKJEFTNS or IKJEFTAP that are in storage.  Or     *
*                   display the entire table.  Or replace a numbered  *
*                   entry with a new program name.  Or blank out      *
*                   any numbered entry.  (Be very careful if you are  *
*                   attempting to blank an entry.  Blanking an entry  *
*                   invalidates ALL subsequent entries).  If you are  *
*                   invoking a display function, then the entire      *
*                   table is shown, unless you enter a number, and    *
*                   then, only that slot is shown.  The tables        *
*                   handled by this program are the actual tables     *
*                   pointed to by the LWA of the issuing TSO/E        *
*                   address space, and they lie in that user's        *
*                   TSO/E address space (unless they were pointed to, *
*                   and are from an IKJTABLS load module that is in   *
*                   the LPA list.)                                    *
*                                                                     *
*       Function:   To substitute one new program name in the local   *
*                   incore TSO auth tables, IKJEFTE2, IKJEFTE8, or    *
*                   IKJEFTAP, IKJEFTNS lists.  This is done to any    *
*                   numbered entry of each table.  Or else merely to  *
*                   display the contents of the entire table, or the  *
*                   contents of any particular numbered entry.        *
*                                                                     *
*                   The effect of replacing any program name is       *
*                   immediate.  The scope of the change, is just for  *
*                   the issuing current TSO userid.                   *
*                                                                     *
*                   You can blank out any numbered entry in any of    *
*                   the four tables.  But blanking an entry, will     *
*                   invalidate all subsequent table entries which     *
*                   follow the blanked entry slot.  So be careful!    *
*                                                                     *
*                   Or, you can use this program to list the complete *
*                   contents of any of the auth tables which are      *
*                   incore.                                           *
*                                                                     *
*                   Additionally, as described below, you can change  *
*                   fields in the LWA which characterize the          *
*                   individual tables--size characteristics and       *
*                   whether or not the table came from STEPLIB.       *
*                                                                     *
*         Syntax:   TSUB ttA nnn pgmname                              *
*                                                                     *
*                   Where tt is a table code, and A is an action      *
*                   code.                                             *
*                                                                     *
*                   The table code is a nickname for any of the       *
*                   TSO/E auth tables which are incore.  They are:    *
*                                                                     *
*                   E2 - IKJEFTE2 = AUTHCMD  entry in IKJTSOxx        *
*                   E8 - IKJEFTE8 = AUTHPGM  entry in IKJTSOxx        *
*                   AP - IKJEFTAP = AUTHTSF  entry in IKJTSOxx        *
*                   NS - IKJEFTNS = NOTBKGND entry in IKJTSOxx        *
*                                                                     *
*                   If the action code is B (blank the numbered       *
*                   entry), then no program name is required,         *
*                   but a number is required.  When blanking a        *
*                   table entry, BE VERY CAREFUL !!!!!                *
*                                                                     *
*       WARNING  >  If you blank out an entry which is not the        *
*       WARNING  >  last entry in the particular table, then          *
*       WARNING  >  all subsequent entries in that table are          *
*       WARNING  >  rendered invalid!  It is best to restore          *
*       WARNING  >  a non-blank entry to that slot, using the         *
*       WARNING  >  ttR function, where tt is the table code.         *
*                   Then you will be able to display the rest         *
*                   of the table using the ttD function.              *
*                                                                     *
*                   If the action code is D (display the given        *
*                   entry), then no program name is required.         *
*                   The default action is to display the entire       *
*                   table, unless a number is entered.  If a          *
*                   number is present, then only that entry           *
*                   number is displayed.  If the number is larger     *
*                   than the number of entries in that particular     *
*                   table, then an informative error message is       *
*                   issued, and the program ends with code = 4.       *
*                                                                     *
*                   If the action code is R (replace the program      *
*                   name) then a number (the table entry number)      *
*                   and a program name are required.  If you want     *
*                   to blank that slot, instead of putting a          *
*                   program name into it, then use action code B.     *
*                   But if you are blanking any slot which is not     *
*                   the last slot, then PLEASE HEED THE WARNING       *
*                   THAT IS ABOVE.                                    *
*                                                                     *
*                   If the action code is H, then TSUB will replace   *
*                   the last 8 bytes of the table header with the     *
*                   literal: C' PARMLIB', as if the table were        *
*                   created from the IKJTSOxx member in PARMLIB.      *
*                                                                     *
*                   If the action code is L, then TSUB will look to   *
*                   create a length value for that table.  This value *
*                   is equal to the length of a table with all the    *
*                   non-blank entries, plus all the potential blank   *
*                   entries at the end of the table.  So this number  *
*                   will often reflect more entries than TSO will     *
*                   actually use.  Additionally, TSUB can change or   *
*                   blank any one of these entries, because TSUB's    *
*                   range depends on the number of entries indicated  *
*                   by the LWA length.  (If there's no length, then   *
*                   TSUB uses the length of all non-blank entries     *
*                   plus the first blank, if it exists.)              *
*                                                                     *
*                   If the action code is M, then TSUB will look to   *
*                   create a length value for that table.  This value *
*                   is equal to the length of a table with all the    *
*                   non-blank entries, plus one blank entry, if any   *
*                   perceived blank entries exist at the end of the   *
*                   table.                                            *
*                                                                     *
*                   If the action code is Z, then TSUB will look at   *
*                   the LWA length value for that table, and it will  *
*                   zero that length value, whether it already was    *
*                   zero, or not.                                     *
*                                                                     *
*                   If the action code is S, then TSUB will make      *
*                   the given table look like it came from STEPLIB,   *
*                   so that a subsequent PARMLIB UPDATE(xx) command   *
*                   will not overlay the session's auth table.        *
*                                                                     *
*                   If the action code is P, then TSUB will make      *
*                   the given table look like it came from PARMLIB,   *
*                   so that a subsequent PARMLIB UPDATE(xx) command   *
*                   will overlay the session's auth table.            *
*                                                                     *
*                   If the action code is X, then TSUB will display   *
*                   all the LPA address ranges (undocumented).        *
*                                                                     *
*                   If the PLATCMD or PLATPGM keywords (and at least  *
*                   one name) were not coded in the active IKJTSOxx   *
*                   PARMLIB entry, then there is no control block of  *
*                   names to be pointed to.  The condition is         *
*                   reported.  If these keywords WERE coded in the    *
*                   IKJTSOxx member of PARMLIB which is currently     *
*                   active, then the PC and PP table codes in TSUB    *
*                   WILL ACT ON THE COMMON STORAGE COPY of THESE      *
*                   TWO TABLES ONLY.                                  *
*                                                                     *
*  Recommendation:  First list the entire table using the "D"         *
*                   action code, and then decide which entry, by      *
*                   number, that you want to replace.                 *
*                                                                     *
*                   Then use the "R" action code, to replace the      *
*                   particular numbered entry you have chosen.        *
*                                                                     *
*            Note:  The E2, E8, AP, or NS table which is being        *
*                   used by the system, can come from either the      *
*                   IKJTSOxx PARMLIB entry, or it can come from       *
*                   an IKJTABLS load module which was running         *
*                   from an APF authorized library as a STEPLIB,      *
*                   or a default IKJTABLS entry in LPALIB.  Each      *
*                   CSECT is copied into the TSO user's address       *
*                   space, albeit in a protected key, and pointed     *
*                   to by the user's LWA, except in the case of an    *
*                   IKJTABLS CSECT that is in LPALIB.  These are      *
*                   the actual auth tables, E2, E8, AP, NS, in        *
*                   use by that TSO address space.                    *
*                                                                     *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  Change Log:                                                        *
*    2008/09/10 - 1.0 - Initial version - Got it to work.             *
*                       TSUB can blank any slot.  I'm allowing        *
*                       that for now, because the scope of the        *
*                       possible damage is only for that TSO          *
*                       session as long as it is logged on.           *
*                       The LWA auth tables are all reset by          *
*                       logging on to that TSO session again.         *
*                                                                     *
*    2008/09/15 - 1.0 - Filled in and cleaned up some of the doc.     *
*                                                                     *
*    2009/01/28 - 1.0 - Added action codes: H, L, Z, S, P             *
*                                                                     *
*         All action codes except D need APF-authorization.           *
*                                                                     *
*         What they do:                                               *
*                                                                     *
*            H - Add PARMLIB-like table header, in 2nd 8-bytes.       *
*            L - Supply length of table in LWA with ALL the blanks.   *
*            M - Supply length of table to first blank, in LWA.       *
*            Z - Zero the table length marked in the LWA.             *
*            S - Mark that the table came from STEPLIB, so            *
*                 someone (else's) PARMLIB UPDATE(xx) won't           *
*                 overlay it.                                         *
*            P - Turn off STEPLIB bit in LWA and mark that it         *
*                 came from PARMLIB.  Now PARMLIB UPDATE(xx)          *
*                 will overlay the table.                             *
*            X - (undocumented) Gives LPA storage range display.      *
*                                                                     *
*         Other action codes are: (these are the original ones)       *
*                                                                     *
*            D - Display table entries by slot number.                *
*            R - Replace the entry in a given slot, by another one.   *
*            B - Blank a given table entry, by slot number.           *
*                                                                     *
*    2009/02/01 - 1.1 - Fourth and fifth base registers.              *
*                                                                     *
*         Improved message clarity.  Told messages to show states,    *
*          "before" and "after" any changes were made.                *
*                                                                     *
*    2009/02/12 - 1.1 - Fix bug in calculating length of NS table.    *
*         Fix convoluted logic in calculating table lengths.          *
*                                                                     *
*    2009/02/13 - 1.1 - Measure perceived blanks after logical end    *
*         of the table.  For NS table, blank an entry with X'0000'    *
*         for the "length" field, instead of X'FFFF', to see more     *
*         perceived blanks, if there are any.                         *
*                                                                     *
*    2009/02/16 - 1.1 - Added option M to tailor length to reflect    *
*         only up to the first blank.  Changed option L to make the   *
*         LWA length equal to all non-blank entries plus all blank    *
*         entries too.  Thus the table can be expanded, even if       *
*         lengths are there.                                          *
*                                                                     *
*    2009/02/18 -1.1.31 Cosmetic changes. Put in Version numbers.     *
*                                                                     *
*    2009/02/20 -1.1.32 Improved displays for PC and PP tables.       *
*                       Made sure S,P,H,L,M,Z options for PC and PP   *
*                       actually do nothing, and say they do nothing. *
*                       Made "error display" messages better.         *
*                                                                     *
*    2009/02/24 -1.1.33 Better messages if PLATPGM or PLATCMD tables  *
*                       are missing.                                  *
*                                                                     *
*    2009/03/03 -1.1.34 More cosmetic changes in title & messages.    *
*                                                                     *
***********************************************************************
*                                                                     *
***********************************************************************
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*       I N S T R E A M    M A C R O S                                *
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
***********************************************************************
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         YREGS
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
*  ---------------------------------------------------------------  *
*    This macro is used to display hex values in a printed report.
*  ---------------------------------------------------------------  *
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R9,HEX
         LM    R15,R1,HEXSAVE
         MEND
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
TSUB     CSECT
TSUB     AMODE 31
TSUB     RMODE 24
         USING *,R15                                                  *
         B     BEGINN               Eyecatcher
MAXBLANK DC    F'120'        Guess of max number of blanks after table
         DC    CL5'TSUB '
VERS#    DC    CL10'Ver 1.35'
         DC    CL18' - &SYSDATE &SYSTIME '
BEGINN   DS    0H
         DROP  R15
         USING TSUB,R12,R11,R10,R6,R7  Set up base registers.
         STM   R14,R12,12(R13)
         LR    R12,R15                 Set up base registers.
         ST    R1,SAVEPARM          Save CPPL pointer to use later.
         LA    R11,4095(,R12)       Second base.
         LA    R11,1(,R11)
         LA    R10,4095(,R11)       Third base.
         LA    R10,1(,R10)
         LA    R6,4095(,R10)        Fourth base.
         LA    R6,1(,R6)
         LA    R7,4095(,R6)         Fifth base.
         LA    R7,1(,R7)
         LA    R1,SAVEAREA          Point to new save area
         ST    R1,8(,R13)           Forward save area chain pointer
         ST    R13,4(,R1)           Backward save area chain pointer
         LR    R13,R1               New save area address
         B     INITCON              Branch past save area
         SPACE 1
* -----------------------
SAVEAREA DC    18F'0'               Non-reentrant save area
* -----------------------
INITCON  DS    0H                   Initialize constants to be sure.
         MVI   OFFFLAG,X'00'
         MVI   PLATFLG,X'00'
         MVI   MEASFLG,X'00'
         MVI   LPAFLAG,X'00'
         MVI   SHBLFLG,X'00'
         MVI   LPADFLG,X'00'
         MVI   NSCHFLG,X'00'
         MVI   HAVLFLG,X'00'
         MVI   LWAPFLG,X'00'
         MVI   LWAMFLG,X'00'
         MVI   TIDFLAG,X'00'
         MVI   OLDFLAG,X'00'
         MVI   FLAGZ,X'00'
         MVI   LINEB,X'40'
         MVI   LINAB,X'40'
         XC    FSTCOUNT,FSTCOUNT
         XC    FSTNOUNT,FSTNOUNT
         MVC   FSTFIELD(8),BLANKS
         MVI   BLANKS-1,X'40'
         MVC   BLANKS,BLANKS-1
         MVC   CODEPLAC(2),BLANKS
         MVC   DISPHDR(16),BLANKS
         XC    SLOTBIN,SLOTBIN
         XC    BLNKCNT,BLNKCNT
         XC    NTRYCNT,NTRYCNT
         XC    SAVETCUR,SAVETCUR
         MVC   SLOTSAVE,BLANKS
         MVC   FSTNAME,BLANKS
         MVI   CMDBCOPY-1,X'00'
         MVC   CMDBCOPY,CMDBCOPY-1
* -----------------------
GETPSCB  DS    0H                  See if we are allowed to
*                                  run this program.
         L     R2,16               POINT TO CVT.
         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS
         L     R2,4(,R2)           POINT TO TCB.
         L     R2,X'B4'(,R2)       POINT TO JSCB.
         L     R2,X'108'(,R2)      POINT TO PSCB.
         LA    R2,0(,R2)           CLEAR HIGH BYTE.
         LTR   R2,R2               ANY PSCB?
         BZ    EOJ4                GET OUT.  NOT TSO.
         L     R1,SAVEPARM         Get the address of the CPPL back
         USING CPPL,R1
         L     R0,CPPLUPT          Copy CPPL fields for possible
         ST    R0,SAVEUPT            later use, if needed.
         L     R0,CPPLPSCB
         ST    R0,SAVEPSCB
         L     R0,CPPLECT
         ST    R0,SAVEECT
         DROP  R1
         BAL   R9,PGMTITLE         First display the program title.
         USING PSCB,R2
CHEKAUTH DS    0H
         NOP   GETLWA              Zap to bypass authorization check
         TM    PSCBATR1,PSCBACCT   ACCT user?
         BO    GETLWA              Yes.  Continue.
         TM    PSCBATR1,PSCBCTRL   OPER user?
         BZ    EOJ4                No.  Get out.
         DROP  R2
***** ----- >>>>>
GETLWA   DS    0H                  Obtain all the relevant fields
*                                  from the LWA (Logon Work Area)
         L     R2,X'224'           Point to PSAAOLD
         L     R2,X'6C'(,R2)       Point to ASXB
         L     R2,X'14'(,R2)       Point to LWA
         ST    R2,LWAADDR          Store LWA address
         USING LWA,R2
* ------------------------------------------------------------------ *
*    Save all the relevant information from the LWA, to use later.   *
* ------------------------------------------------------------------ *
         ST    R5,SAVER5B          Store original contents of R5
         L     R5,LWATNS           Pointer to NS table
         ST    R5,SAVETNS          Save it.
         L     R5,LWATE2           Pointer to E2 table
         ST    R5,SAVETE2          Save it.
         L     R5,LWATE8           Pointer to E8 table
         ST    R5,SAVETE8          Save it.
         L     R5,LWATAP           Pointer to AP table
         ST    R5,SAVETAP          Save it.
         XR    R5,R5               Clear register to be double sure.
         LH    R5,LWATNSLN         Length of NS table if available
         STH   R5,SAVETNSL         Save whatever was there in program.
         LTR   R5,R5               Has a size been supplied in the LWA?
         BZ    NONSSIZE            No
         OI    LWAMFLG,X'40'       Yes. Indicate that in a flag.
NONSSIZE DS    0H
         LH    R5,LWATE2LN         Length of E2 table if available
         STH   R5,SAVETE2L         Save whatever was there in program.
         LTR   R5,R5               Has a size been supplied in the LWA?
         BZ    NOE2SIZE            No
         OI    LWAMFLG,X'20'       Yes. Indicate that in a flag.
NOE2SIZE DS    0H
         LH    R5,LWATE8LN         Length of E8 table if available
         STH   R5,SAVETE8L         Save whatever was there in program.
         LTR   R5,R5               Has a size been supplied in the LWA?
         BZ    NOE8SIZE            No
         OI    LWAMFLG,X'10'       Yes. Indicate that in a flag.
NOE8SIZE DS    0H
         LH    R5,LWATAPLN         Length of AP table if available
         STH   R5,SAVETAPL         Save whatever was there in program.
         LTR   R5,R5               Has a size been supplied in the LWA?
         BZ    NOAPSIZE            No
         OI    LWAMFLG,X'80'       Yes. Indicate that in a flag.
NOAPSIZE DS    0H
         L     R5,SAVER5B          Restore original R5 contents
         MVC   LWAPFLG,LWAPRMLB    Save flags showing which tables
*                                  came from STEPLIB, if any.
         DROP  R2
* ------------------------------------------------------------------ *
*    At this point we have finished saving things out of the LWA.    *
* ------------------------------------------------------------------ *
*    Now we have to find the LPA boundaries.                         *
* ------------------------------------------------------------------ *
LPAINFO  DS    0H
         BAL   R9,GETLPABD         Get list of LPA storage boundaries.
* ------------------------------------------------------------------ *
***** ----- >>>>>  We can handle the public Platform Command and     *
***** ----- >>>>>  Platform Program tables, if they exist.           *
* ------------------------------------------------------------------ *
GETPCPP  DS    0H            Info about Platpgm and Platcmd Tables
         L     R2,16               Point to CVT
         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)
         L     R2,X'4C'(,R2)       Point to TPVT
         ST    R2,SAVETPVT         Save TPVT address for later use
         L     R2,X'14'(,R2)       Point to CTLT control block
         ST    R2,SAVECTLT         Save CTLT address for later use
         L     R2,SAVETPVT         Load TPVT address back
         L     R2,X'34'(,R2)       Point to PLATCMD pointer
         LTR   R2,R2               Is there any?
         BZ    NOFCVE              No. Say so.
         ST    R2,SAVEFCVE         Yes. Store the FCVE pointer away.
         OI    PLATFLG,X'01'       Indicate that FCVE exists.
TRYPPVE  DS    0H
         L     R2,SAVETPVT         Load TPVT address back
         L     R2,X'40'(,R2)       Point to PLATPGM pointer
         LTR   R2,R2               Is there any?
         BZ    NOPPVE              No. Say so.
         ST    R2,SAVEPPVE         Yes. Store the PPVE pointer away.
         OI    PLATFLG,X'02'       Indicate that PPVE exists.
TRYPPVEE DS    0H
         B     CHKOLVER            Skip over relevant error messages.
* -------------------------------------------------------------- *
* ------           Error messages if tables don't exist   ------ *
* -------------------------------------------------------------- *
NOFCVE   DS    0H
         APUT  =C'No PLATCMD table found',22
         B     TRYPPVE
NOPPVE   DS    0H
         APUT  =C'No PLATPGM table found',22
         B     TRYPPVEE
* ----------------------------------------------------------------- *
*    There doesn't seem to be a way to tell from an old INMXPARM    *
*    control block itself, that it is the old version.  So we use   *
*    the position of the active PARMLIB member name in the TPVT.    *
* ----------------------------------------------------------------- *
CHKOLVER DS    0H
         L     R2,SAVETPVT         Load TPVT address back.
         CLC   =C'IKJ',7(R2)       Parmlib member name in old position?
         BNE   PARMSCAN            No. It's a new TSO/E version
         OI    OLDFLAG,X'01'       Yes. Flag that the system is old.
* -------------------------------------------------------------- *
*    After we got the system information we finally start        *
*     scanning the TSO command for parms, here.                  *
* -------------------------------------------------------------- *
PARMSCAN DS    0H
         L     R1,SAVEPARM         Original R1 from entry to program.
         LTR   R1,R1               Any CPPL?
         BZ    EOJ8                No. Get out.
         L     R1,0(,R1)           Point to Command Buffer
         LTR   R1,R1               Any Command Buffer?
         BZ    EOJ4                Get out if none.
         LH    R3,0(,R1)           Load length.
         CH    R3,=H'4'            Anything?
         BNH   EOJ4                No.  Get out.
         LR    R5,R3               Length of command + 4
         ICM   R5,14,FULLZERO      Clear high order 3 bytes.
         ST    R1,CMBUFAD          Save Command Buffer Address
         LH    R3,2(,R1)           Load offset.
         ST    R3,OFFSETSV         Save offset value.
         SR    R5,R3               Subtract offset from full length+4
         SH    R5,=H'4'            Correct for length of CMDBUFR header
*                                  in the command buffer.
         BC    8,EOJC              Zero, Message
         BC    5,EOJC              Less, or overflow, out.
         ST    R5,CMBUFEND         Store away the number of bytes left
         L     R1,CMBUFAD          Load Command Buffer Address
*
* ----  Copy command buffer into pgm's buffer so we can control it.
*
         STM   R14,R1,SAVE1401     Now save registers 14 thru 1.
         XR    R14,R14             Clear R14.
         LH    R14,0(,R1)          Load full command buffer length.
         S     R14,=F'5'           Subtract 4 for header, 1 for execute
         ICM   R14,14,FULLZERO     Ensure cmd buffer smaller than 255
         EX    R14,COPYCMDB        Copy command into pgm's area.
         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.
         B     GOGOGO              Jump over executed instruction.
COPYCMDB MVC   CMDBCOPY(0),4(R1)   <<< Executed >>>
GOGOGO   DS    0H
* ----
         LA    R2,3                Load register for BCT loop.
* >>>
         LA    R1,CMDBCOPY         Point to command in our buffer
         A     R1,OFFSETSV         Add offset, point to subcommands
         ST    R1,CHARSTRT         Store starting point away
* >>>
         LR    R4,R1               Initialize pointer
         LA    R4,0(,R4)           to first character of function name.
         LA    R8,0                Initialize character count
CUTIDLEN CLI   0(R4),X'40'         Is this character a blank?
         BE    AFTFIRST            Yes, end of the first parm.
         CLI   0(R4),X'00'         Is this character hex zero?
         BE    AFTFIRST            Yes, end of command in buffer copy.
         LA    R4,1(,R4)           Bump another character
         LA    R8,1(,R8)           Count another character
         CR    R8,R5               End of command buffer ?
         BNL   AFTFIRST            Yes. Get out now.
         BCT   R2,CUTIDLEN         Try for blank again.
AFTFIRST DS    0H
         MVC   TABCODE(8),BLANKS   Clear field
         BCTR  R8,0                Subtract 1 for execute.
         L     R1,CHARSTRT         Reload R1 to be sure it's correct.
         EX    R8,MOVOUTL          Move entered parameter to program.
         LA    R8,1(,R8)           Restore number of characters
         AR    R1,R8               Point past last search
         ST    R1,CHARCONT         Continue from here
         ST    R8,SAVER8A          Save register
* ---- >
SEEIFPRM DS    0H                  Check if a command is here
         OC    TABCODE(3),BLANKS   Uppercase. Won't affect numbers.
         CLI   TABCODE+2,C'X'      Special action code, code X.
         BNE   SEEIFJ01            Not this. Just go on.
         OI    LPADFLG,X'01'       Set flag to display LPA range.
SEEIFJ01 DS    0H
*--*
         TM    LPADFLG,X'01'       Display LPA range only?
         BZ    SEEIFK01            No. Do all regular processing.
         BAL   R9,GETLPRNT         Yes. Display LPA range and exit.
         B     EOJ0                Out of program with Code 0
SEEIFK01 DS    0H
*--*
         CLI   TABCODE+2,C'R'      Replace the entry in the given slot
         BE    SEEIF0A1
         CLI   TABCODE+2,C'B'      Blank the given slot
         BE    SEEIF0A2
         CLI   TABCODE+2,C'D'      Display contents of given slot
         BE    SEEIF0A3              or all slots.
         CLI   TABCODE+2,C'H'      Alter table header
         BE    SEEIF0A4
         CLI   TABCODE+2,C'L'      Supply length for table in LWA
         BE    SEEIF0A5              including trailing blank entries.
         CLI   TABCODE+2,C'M'      Supply length for table in LWA plus
         BE    SEEIF0M5              one trailing blank, if there.
         CLI   TABCODE+2,C'Z'      Zero length for table in LWA
         BE    SEEIF0A6
         CLI   TABCODE+2,C'S'      Say this table came from STEPLIB
         BE    SEEIF0A7
         CLI   TABCODE+2,C'P'      Say this table is not from STEPLIB
         BE    SEEIF0A8
         B     SEEIF000
SEEIF0A1 DS    0H
         OI    OFFFLAG,X'01'       Replace an entry
         B     SEEIF001
SEEIF0A2 DS    0H
         OI    OFFFLAG,X'02'       Blank entry in the last slot
         B     SEEIF001
SEEIF0A3 DS    0H
         OI    OFFFLAG,X'04'       Display an entry or entries
         B     SEEIF001
SEEIF0A4 DS    0H
         OI    OFFFLAG,X'08'       Alter table header
         B     SEEIF001
SEEIF0M5 DS    0H                  Short length with one blank
         OI    SHBLFLG,X'01'
SEEIF0A5 DS    0H
         OI    OFFFLAG,X'10'       Supply length for table in LWA
         B     SEEIF001
SEEIF0A6 DS    0H
         OI    OFFFLAG,X'20'       Zero length for table in LWA
         B     SEEIF001
SEEIF0A7 DS    0H
         OI    OFFFLAG,X'40'       Say this table came from STEPLIB
         B     SEEIF001
SEEIF0A8 DS    0H
         OI    OFFFLAG,X'80'       Say this table not from STEPLIB
         B     SEEIF001
SEEIF000 DS    0H                  Wrong function code was entered...
* --- >                            Display what we entered, plus code
         MVC   LINE,LINEB          Clear line
         MVC   LINE(3),TABCODE     Move code in
         HEX   LINE+6,1,OFFFLAG    Display contents of flag
         MVC   LINE+13(35),=C'Program table code + Function code '
         APUT  LINE,48
* --- >
         BAL   R9,ERRORCOD         Indicate error and display syntax.
         B     EOJ4                Get out with code = 4.
SEEIF001 DS    0H                  Which table to change
         MVC   CODEPLAC(2),TABCODE    Save table code.
* --- >
         TM    OFFFLAG,X'04'       Display only--no changes to be made
         BO    NOBEFORE            Don't show "before changes" message
         STM   R14,R1,SAVE1401     Save registers 14 thru 1.
         MVC   LINE,LINE-1
         APUT  LINE,30
         APUT  MESSAGED,L'MESSAGED Say "after making changes"
         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.
NOBEFORE DS    0H
* --- >                            Display what we entered, plus code
         MVC   LINE,LINEB          Clear line
         MVC   LINE(3),TABCODE     Move code in
         HEX   LINE+6,1,OFFFLAG    Display contents of flag
         MVC   LINE+13(35),=C'Program table code + Function code '
         APUT  LINE,48
* --- >                            Handle each table separately.
         CLC   TABCODE(2),=C'E2'   Change IKJEFTE2?
         BE    E2CHANGE            Yes. Branch.
         CLC   TABCODE(2),=C'E8'   Change IKJEFTE8?
         BE    E8CHANGE            Yes. Branch.
         CLC   TABCODE(2),=C'AP'   Change IKJEFTAP?
         BE    APCHANGE            Yes. Branch.
         CLC   TABCODE(2),=C'PC'   Change PLATCMD?
         BE    PCCHANGE            Yes. Branch.
         CLC   TABCODE(2),=C'PP'   Change PLATPGM?
         BE    PPCHANGE            Yes. Branch.
         CLC   TABCODE(2),=C'NS'   Change IKJEFTNS?
         BE    NSCHANGE            Yes. Branch.
         BAL   R9,ERRORCOD         Indicate error and display syntax.
         B     EOJ4                Invalid code entered.
EOJ      DS    0H                  END OF JOB
         L     R13,4(,R13)
         LR    R15,R5              Put in real return code
         ST    R15,16(,R13)        Shove it where it belongs
         L     R14,12(,R13)        R14 and
         LM    R0,R12,20(R13)        rest of registers
         BR    R14                 Go back to caller
EOJ0     DS    0H                  Return code 0
         MVC   LINE,LINE-1
         APUT  LINE,30
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGR0       Show Return Code 0
         APUT  MESSAGR0,L'MESSAGR0
         LA    R5,0                Set CC = 0
         B     EOJ                 Now end the program
EOJ4     DS    0H                  Return code 4
         MVC   LINE,LINE-1
         APUT  LINE,30
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGR4       Show Return Code 4
         APUT  LINE,L'MESSAGR4
         L     R5,FULLFOUR         Set CC = 4
         B     EOJ                 Now end the program
EOJ8     DS    0H                  Return code 8
         MVC   LINE,LINE-1
         APUT  LINE,30
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGR8       Show Return Code 8
         APUT  LINE,L'MESSAGR8
         L     R5,FULLEIGT         Set CC = 8
         B     EOJ                 Now end the program
EOJC     DS    0H                  Return code 12
         MVC   LINE,LINE-1
         APUT  LINE,30
         MVC   LINE,LINE-1         Clear output area
         MVC   LINE,MESSAGRC       Show Return Code 12
         APUT  LINE,L'MESSAGRC
         L     R5,FULLTWLV         Set CC = 12
         B     EOJ                 Now end the program
** ---------------------------------------------------------------- **
**                                                                  **
**   Different Table Handling Routines                              **
**   --------- ----- -------- --------                              **
**                                                                  **
**  At this point, we have the routines which handle each of the    **
**  separate types of tables.  E2, E8, AP, and NS, for which the    **
**  live LWA version is handled.  But we also do the FCVE and       **
**  PPVE (Platform Command and Platform Program) tables pointed     **
**  to by the TPVT (TSO Parmlib Vector Table) control block, and    **
**  those two tables, if they exist, are similarly handled.  But    **
**  the FCVE and PPVE tables (table codes PC and PP respectively,   **
**  in this program) are in common storage, and are not in the      **
**  TSO user's address space.                                       **
**                                                                  **
** ---------------------------------------------------------------- **
E2CHANGE DS    0H                 Handle the E2 table
         OI    TIDFLAG,X'20'      Show we're doing the E2 table.
         MVC   TABLEID,=C'E2'     Identify which table
         BAL   R9,ADJNEXTP        Get to first blank
         BAL   R9,NAMEPARM        Get rest of parms from the command
         L     R4,SAVETE2         Point to saved E2 table address
         ST    R4,TABLSTRT        Store start address of table
         ST    R4,TABLADDR        Keep start address of table
*
         BAL   R9,TESTLPA         Check if table address is in LPA
         BAL   R9,CHANGEDL        LPA message (conditional)
         BAL   R9,MEASUR08        Measure the table
*
         L     R1,TABLSTRT        Load it back into work register
**-->>
E2CHENTY DS    0H                 Show we have a size for E2 table
         TM    LPAFLAG,X'01'      Is this table in LPA?
         BO    E2CHYSST           Yes. Don't message the properties.
         TM    LWAMFLG,X'20'      Do we have a size for the E2 table?
         BZ    E2CHNOSZ           No.
         OI    FLAGZ,X'04'        Yes. Flag that we have a size.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.
         HEX   MESSAG1A+57,2,SAVETE2L    Move in length amount
         MVI   MESSAG1A+61,C'.'          Put period at end.
         APUT  MESSAG1A,L'MESSAG1A
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     E2CHYSSZ
E2CHNOSZ DS    0H                 Show message that we have no size
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1B,L'MESSAG1B
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
E2CHYSSZ DS    0H
         TM    LWAPFLG,X'20'      Was the E2 table loaded from STEPLIB?
         BZ    E2CHNOST           No. Say that it wasn't.
         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.
         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1C,L'MESSAG1C
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     E2CHYSST
E2CHNOST DS    0H                 Message. Table not from STEPLIB.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1D,L'MESSAG1D
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
E2CHYSST DS    0H
*-*                               Print out table header
         BAL   R9,PRTABLHD        Table Header Display Routine
*-*
         LA    R1,X'10'(,R1)      Bump past header
         ST    R1,TABLSTRT        Store new start address
* - -
         LH    R2,SAVETE2L        Load LWA Table Length
         LTR   R2,R2              Is it there?
         BNZ   E2CHHAVB           There is a length, so we use it.
* - -                             None there, have to guess.
***
         LH    R3,ME08LENG        Measured table length.
***
         B     E2CHNOHB           And go on.
E2CHHAVB DS    0H                 We have a table length given.
         MVC   SAVETCUR,SAVETE2L  This is the length we use for now.
         LR    R3,R2              Dump the number into R3.
E2CHNOHB DS    0H
         L     R4,TABLADDR        Load start address of table
         AR    R4,R3              Point past the guessed end of table.
         S     R4,=F'16'          Compensate for 16 byte head start.
         ST    R4,TABLEND         Store away guessed table end.
* - -
         LR    R5,R3              Dump best length into register.
         SRL   R5,3               Divide by 8.
         BCTR  R5,0               Actually two fewer entries, because
         BCTR  R5,0                of the header.
         ST    R5,TABLENUM        Store the number of entries.
***
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1
         ST    R1,SAVER1B
         L     R1,TABLENUM         Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+22(10),MASK10  Move in the mask
         ED    LINE+22(10),CVDAREA+3 Make it pretty
         L     R1,SAVER1B
         MVC   LINE(24),=C'Number of valid entries:'
         APUT  LINE,45
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
***
* - >
         LA    R5,8               Size of each E2 table entry
         ST    R5,TABLESIZ        Store size of each entry
*                                 We'll stop the search at first blank
         SR    R4,R5              Point past end of table - guessed.
         ST    R4,SAVLSLOT        Store this location
         TM    OFFFLAG,X'04'      Is this just a contents display?
         BZ    E2CHANGX           No. We must do a real change.
         BAL   R9,DISPTABL        Yes. Just display.
         BAL   R9,CHANGED         Message that nothing changed.
         B     EOJ0
E2CHANGX DS    0H
         BAL   R9,DISPTABL        Search table for the proper entry.
         BAL   R9,SETTMODE        Do the Key 0 stuff
         BAL   R9,CHANGED         Tell em we changed the values.
         B     EOJ0
** ---------------------------------------------------------------- **
E8CHANGE DS    0H                 Handle the E8 table
         OI    TIDFLAG,X'10'      Show we're doing the E8 table.
         MVC   TABLEID,=C'E8'     Identify which table
         BAL   R9,ADJNEXTP        Get to first blank
         BAL   R9,NAMEPARM        Get rest of parms from the command
         L     R4,SAVETE8         Point to saved E8 table address
         ST    R4,TABLSTRT        Store start address of table
         ST    R4,TABLADDR        Keep start address of table
*
         BAL   R9,TESTLPA         Check if table address is in LPA
         BAL   R9,CHANGEDL        LPA message (conditional)
         BAL   R9,MEASUR08        Measure the table
*
         L     R1,TABLSTRT        Load it back into work register
**-->>
E8CHENTY DS    0H                 Deal with the E8 table.             .
         TM    LPAFLAG,X'01'      Is this table in LPA?
         BO    E8CHYSST           Yes. Don't message the properties.
         TM    LWAMFLG,X'10'      Do we have a size for the E8 table?
         BZ    E8CHNOSZ           No.
         OI    FLAGZ,X'04'        Yes. Flag that we have a size.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.
         HEX   MESSAG1A+57,2,SAVETE8L    Move in length amount
         MVI   MESSAG1A+61,C'.'          Put period at end.
         APUT  MESSAG1A,L'MESSAG1A
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     E8CHYSSZ
E8CHNOSZ DS    0H
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1B,L'MESSAG1B
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
E8CHYSSZ DS    0H
         TM    LWAPFLG,X'10'      Was the E8 table loaded from STEPLIB?
         BZ    E8CHNOST           No. Say that it wasn't.
         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.
         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1C,L'MESSAG1C
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     E8CHYSST
E8CHNOST DS    0H                 Message. Table not from STEPLIB.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1D,L'MESSAG1D
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
E8CHYSST DS    0H
*-*                               Print out table header
         BAL   R9,PRTABLHD        Table Header Display Routine
*-*
         LA    R1,X'10'(,R1)      Bump past header
         ST    R1,TABLSTRT        Store new start address
* - -
         LH    R2,SAVETE8L        Load LWA Table Length
         LTR   R2,R2              Is it there?
         BNZ   E8CHHAVB           There is a length, so we use it.
* - -                             None there, have to guess.
***
         LH    R3,ME08LENG        Measured table length.
***
         B     E8CHNOHB           And go on.
E8CHHAVB DS    0H                 We have a table length given.
         MVC   SAVETCUR,SAVETE8L  This is the length we use for now.
         LR    R3,R2              Dump the number into R3.
E8CHNOHB DS    0H
         L     R4,TABLADDR        Load start address of table
         AR    R4,R3              Point past the guessed end of table.
         S     R4,=F'16'          Compensate for 16 byte head start.
         ST    R4,TABLEND         Store away guessed table end.
* - -
         LR    R5,R3              Dump best length into register.
         SRL   R5,3               Divide by 8.
         BCTR  R5,0               Actually two fewer entries, because
         BCTR  R5,0                of the header.
         ST    R5,TABLENUM        Store the number of entries.
***
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1
         ST    R1,SAVER1B
         L     R1,TABLENUM         Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+22(10),MASK10  Move in the mask
         ED    LINE+22(10),CVDAREA+3 Make it pretty
         L     R1,SAVER1B
         MVC   LINE(24),=C'Number of valid entries:'
         APUT  LINE,45
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
***
* - -
         LA    R5,8               Size of each E8 table entry
         ST    R5,TABLESIZ        Store size of each entry
* - -                             We'll stop the search at first blank
         SR    R4,R5              Point past end of table - guessed.
         ST    R4,SAVLSLOT        Store this location
         TM    OFFFLAG,X'04'      Is this just a contents display?
         BZ    E8CHANGX           No. We must do a real change.
         BAL   R9,DISPTABL        Yes. Just display.
         BAL   R9,CHANGED         Message that nothing changed.
         B     EOJ0
E8CHANGX DS    0H
         BAL   R9,DISPTABL        Search table for the proper entry.
         BAL   R9,SETTMODE        Do the Key 0 stuff
         BAL   R9,CHANGED         Tell em we changed the values.
         B     EOJ0
** ---------------------------------------------------------------- **
APCHANGE DS    0H                 Handle the AP table
         OI    TIDFLAG,X'80'      Show we're doing the AP table.
         MVC   TABLEID,=C'AP'     Identify which table
         BAL   R9,ADJNEXTP        Get to first blank
         BAL   R9,NAMEPARM        Get rest of parms from the command
* - -
         L     R4,SAVETAP         Get address of AP table
         ST    R4,TABLSTRT        Store start address of table
         ST    R4,TABLADDR        Keep start address of table
*
         BAL   R9,TESTLPA         Check if table address is in LPA
         BAL   R9,CHANGEDL        LPA message (conditional)
         BAL   R9,MEASUR08        Measure the table
*
         L     R1,TABLSTRT        Load it back into work register
**-->>
APCHENTY DS    0H                 Table was made from a IKJTSOxx entry.
         TM    LPAFLAG,X'01'      Is this table in LPA?
         BO    APCHYSST           Yes. Don't message the properties.
         TM    LWAMFLG,X'80'      Do we have a size for the AP table?
         BZ    APCHNOSZ           No.
         OI    FLAGZ,X'04'        Yes. Flag that we have a size.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.
         HEX   MESSAG1A+57,2,SAVETAPL    Move in length amount
         MVI   MESSAG1A+61,C'.'          Put period at end.
         APUT  MESSAG1A,L'MESSAG1A
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     APCHYSSZ
APCHNOSZ DS    0H
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1B,L'MESSAG1B
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
APCHYSSZ DS    0H
         TM    LWAPFLG,X'80'      Was the AP table loaded from STEPLIB?
         BZ    APCHNOST           No. Say that it wasn't.
         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.
         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1C,L'MESSAG1C
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     APCHYSST
APCHNOST DS    0H                 Message. Table not from STEPLIB.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1D,L'MESSAG1D
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
APCHYSST DS    0H
*-*                               Print out table header
         BAL   R9,PRTABLHD        Table Header Display Routine
*-*
         LA    R1,X'10'(,R1)      Bump past header
         ST    R1,TABLSTRT        Store new start address
* - -
         LH    R2,SAVETAPL        Load LWA Table Length
         LTR   R2,R2              Is it there?
         BNZ   APCHHAVB           There is a length, so we use it.
* - -                             None there, have to guess.
***
         LH    R3,ME08LENG        Measured table length.
***
         B     APCHNOHB           And go on.
APCHHAVB DS    0H                 We have a table length given.
         MVC   SAVETCUR,SAVETAPL  This is the length we use for now.
         LR    R3,R2              Dump the number into R3.
APCHNOHB DS    0H
         L     R4,TABLADDR        Load start address of table
         AR    R4,R3              Point past the guessed end of table.
         S     R4,=F'16'          Compensate for 16 byte head start.
         ST    R4,TABLEND         Store away guessed table end.
* - -
         LR    R5,R3              Dump best length into register.
         SRL   R5,3               Divide by 8.
         BCTR  R5,0               Actually two fewer entries, because
         BCTR  R5,0                of the header.
         ST    R5,TABLENUM        Store the number of entries.
***
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1
         ST    R1,SAVER1B
         L     R1,TABLENUM         Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+22(10),MASK10  Move in the mask
         ED    LINE+22(10),CVDAREA+3 Make it pretty
         L     R1,SAVER1B
         MVC   LINE(24),=C'Number of valid entries:'
         APUT  LINE,45
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
***
* - -
         LA    R5,8               Size of each AP table entry
         ST    R5,TABLESIZ        Store size of each entry
* - -                             We'll stop the search at first blank
         SR    R4,R5              Point past end of table - guessed.
         ST    R4,SAVLSLOT        Save this location.
         TM    OFFFLAG,X'04'      Is this just a contents display?
         BZ    APCHANGX           No. We must do a real change.
         BAL   R9,DISPTABL        Yes. Just display.
         BAL   R9,CHANGED         Message that nothing changed.
         B     EOJ0
APCHANGX DS    0H
         BAL   R9,DISPTABL        Search table for the proper entry.
         BAL   R9,SETTMODE        Do the Key 0 stuff
         BAL   R9,CHANGED         Tell em we changed the values.
         B     EOJ0
** ---------------------------------------------------------------- **
PCCHANGE DS    0H                 Handle the PC table
         OI    TIDFLAG,X'01'      Show PC table chosen.
         MVC   TABLEID,=C'PC'
         TM    PLATFLG,X'01'      Does the table exist?
         BZ    PCCHAERR           No. Report error.
         BAL   R9,ADJNEXTP        Get to first blank
         BAL   R9,NAMEPARM        Get rest of parms from the command
         L     R2,SAVEFCVE        Get the PC table address
         LR    R4,R2              Save it off
         ST    R4,DISPREG         Store register contents for display
* -- >                            Do Display
*-*-*->>                          Print the address out so we can see.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1        Clear line area.
         MVC   LINE(16),=C'Table address:  '
         HEX   LINE+21,4,DISPREG      Display address in Hex
         APUT  LINE,35
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
*-*-*->>
* -- >
         L     R3,X'8'(,R4)       Point to length of table
         STH   R3,SAVETCUR        Store it to show non-zero
         AR    R4,R3              Point just past PC table
         ST    R4,TABLEND         And mark the projected end of table
* - -
         L     R3,X'C'(,R2)       Get number of table entries
         ST    R3,TABLENUM        Preserve number for table search
         LA    R3,8               Load table size
         ST    R3,TABLESIZ        And store it for DISPTABL routine
** -- **
***
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1
         MVC   LINE(22),=C'Table length in Hex:  '
         HEX   LINE+25,2,SAVETCUR
         APUT  LINE,45
         MVC   LINE,LINE-1
         ST    R1,SAVER1B
         L     R1,TABLENUM         Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+22(10),MASK10  Move in the mask
         ED    LINE+22(10),CVDAREA+3 Make it pretty
         L     R1,SAVER1B
         MVC   LINE(24),=C'Number of valid entries:'
         APUT  LINE,45
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
***
** -- **
         L     R3,SAVEFCVE        Get the platcmd table start address
         LA    R3,X'10'(,R3)      Bump past its header
         ST    R3,TABLSTRT        And store the starting place away
* - -
         LA    R5,8               Get 8 bytes ready for subtraction
         SR    R4,R5              Back up to the last slot
         ST    R4,SAVLSLOT        Save location of last table slot
         TM    OFFFLAG,X'04'      Is this just a contents display?
         BZ    PCCHANGX           No. We must do a real change.
         BAL   R9,DISPTABL        Yes. Just display.
         BAL   R9,CHANGED         Message
         B     EOJ0
PCCHANGX DS    0H
         BAL   R9,DISPTABL        Search table for the proper entry.
         BAL   R9,SETTMODE        Do the Key 0 stuff
         BAL   R9,CHANGED         Tell em we changed the values.
         B     EOJ0
PCCHAERR DS    0H                 Say no PC table exists.
         MVC   LINE,LINE-1
         MVC   LINE(43),=C'PC command not valid if no PC table exists.'
         APUT  LINE,43
         B     EOJ4
PCCHAEND DS    0H
         B     EOJ0
** ---------------------------------------------------------------- **
PPCHANGE DS    0H                 Handle the PP table
         OI    TIDFLAG,X'02'      Show PP table chosen.
         MVC   TABLEID,=C'PP'
         TM    PLATFLG,X'02'      Is there a Platpgm table?
         BZ    PPCHAERR           If no, then display error condition
         BAL   R9,ADJNEXTP        Get to first blank
         BAL   R9,NAMEPARM        Get rest of parms from the command
         L     R2,SAVEPPVE        Get the PP table address
         LR    R4,R2              Save it off
         ST    R4,DISPREG         Store PP table address for display
* -- >                            Do Display
*-*-*->>                          Print the address out so we can see.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1        Clear line area.
         MVC   LINE(16),=C'Table address:  '
         HEX   LINE+21,4,DISPREG      Display address in Hex
         APUT  LINE,35
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
*-*-*->>
* -- >
         L     R3,X'8'(,R4)       Size of PP table in bytes
         STH   R3,SAVETCUR        Show it's non-zero
         AR    R4,R3              Point just past the PP table
         ST    R4,TABLEND         Mark the end of table for DISPTABL
* - -
         L     R3,X'C'(,R2)       Get number of table entries
         ST    R3,TABLENUM        Store that number away for DISPTABL
         LA    R3,8               Size of each entry
         ST    R3,TABLESIZ        Store that away too
** -- **
***
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1
         MVC   LINE(22),=C'Table length in Hex:  '
         HEX   LINE+25,2,SAVETCUR
         APUT  LINE,45
         MVC   LINE,LINE-1
         ST    R1,SAVER1B
         L     R1,TABLENUM         Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+22(10),MASK10  Move in the mask
         ED    LINE+22(10),CVDAREA+3 Make it pretty
         L     R1,SAVER1B
         MVC   LINE(24),=C'Number of valid entries:'
         APUT  LINE,45
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
***
** -- **
         L     R3,SAVEPPVE        Get start address of PP table
         LA    R3,X'10'(,R3)      Add 16 to bump past header
         ST    R3,TABLSTRT        Store search starting address away
* - -
         LA    R5,8               Load size of one entry
         SR    R4,R5              Back up to last slot address
         ST    R4,SAVLSLOT        And save it off.
         TM    OFFFLAG,X'04'      Is this just a contents display?
         BZ    PPCHANGX           No. We must do a real change.
         BAL   R9,DISPTABL        Yes. Just display.
         BAL   R9,CHANGED         Message
         B     EOJ0
PPCHANGX DS    0H
         BAL   R9,DISPTABL        Search table for the proper entry.
         BAL   R9,SETTMODE        Do the Key 0 stuff
         BAL   R9,CHANGED         Tell em we changed the values.
         B     EOJ0
PPCHAERR DS    0H                 Say no PC table exists.
         MVC   LINE,LINE-1
         MVC   LINE(43),=C'PP command not valid if no PP table exists.'
         APUT  LINE,43
         B     EOJ4
PPCHAEND DS    0H
         B     EOJ0
** ---------------------------------------------------------------- **
NSCHANGE DS    0H                 Handle the NS table
         OI    TIDFLAG,X'40'      Show we're doing the NS table.
         MVC   TABLEID,=C'NS'     Identify which table
         BAL   R9,ADJNEXTP        Get to first blank
         BAL   R9,NAMEPARM        Get rest of parms from the command
         OI    NSCHFLG,X'01'      Show SETTMODE we're doing NS
* - -
         L     R4,SAVETNS         Saved location of the NS table
         ST    R4,TABLSTRT        Store start address of table
         ST    R4,TABLADDR        Keep start address of table
*
         BAL   R9,TESTLPA         Check if table address is in LPA
         BAL   R9,CHANGEDL        LPA message (conditional)
         BAL   R9,MEASUR10        Measure the table
*
         L     R1,TABLSTRT        Load it to start table search later
**-->>
NSCHENTY DS    0H                 Table was made from a IKJTSOxx entry.
         TM    LPAFLAG,X'01'      Is this table in LPA?
         BO    NSCHYSST           Yes. Don't message the properties.
         TM    LWAMFLG,X'40'      Do we have a size for the NS table?
         BZ    NSCHNOSZ           No.
         OI    FLAGZ,X'04'        Yes. Flag that we have a size.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.
         HEX   MESSAG1A+57,2,SAVETNSL    Move in length amount
         MVI   MESSAG1A+61,C'.'          Put period at end.
         APUT  MESSAG1A,L'MESSAG1A
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     NSCHYSSZ
NSCHNOSZ DS    0H                 Say we have no size for the NS table
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1B,L'MESSAG1B
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
NSCHYSSZ DS    0H
         TM    LWAPFLG,X'40'      Was the NS table loaded from STEPLIB?
         BZ    NSCHNOST           No. Say that it wasn't.
         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.
         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1C,L'MESSAG1C
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     NSCHYSST           Don't put out contradictory messages
NSCHNOST DS    0H                 Message. Table not from STEPLIB.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1D,L'MESSAG1D
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
NSCHYSST DS    0H
*-*                               Print out table header
         BAL   R9,PRTABLHD        Table Header Display Routine
*-*
         LA    R1,X'10'(,R1)      Bump past the table header
         ST    R1,TABLSTRT        Store new start address for DISPTABL
* - -
         LH    R2,SAVETNSL        Load LWA Table Length
         LTR   R2,R2              Is it there?
         BNZ   NSCHHAVB           There is a length, so we use it.
* - -                             None there, have to guess.
***
         LH    R3,ME10LENG        Measured table length.
***
         B     NSCHNOHB           And go on.
NSCHHAVB DS    0H                 We have a table length given.
         MVC   SAVETCUR,SAVETNSL  This is the length we use for now.
         LR    R3,R2              Dump the number into R3.
NSCHNOHB DS    0H
         L     R4,TABLADDR        Load start address of table
         AR    R4,R3              Point past the guessed end of table.
*        S     R4,=F'16'          Compensate for 16 byte head start.
         ST    R4,TABLEND         Store away guessed table end.
* - -
         LR    R5,R3              Dump best length into register.
         S     R5,=F'16'
         STM   R2,R3,SAVER23      Save work registers.
         XR    R2,R2              Zero work registers.
         XR    R3,R3
         LR    R3,R5              Feed length into work register
         D     R2,=F'10'          Divide by 10.
         LR    R5,R3              Save the result.
         LM    R2,R3,SAVER23      Restore work registers.
         ST    R5,TABLENUM        Store the number of entries.
***
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1
         ST    R1,SAVER1B
         L     R1,TABLENUM         Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+22(10),MASK10  Move in the mask
         ED    LINE+22(10),CVDAREA+3 Make it pretty
         L     R1,SAVER1B
         MVC   LINE(24),=C'Number of valid entries:'
         APUT  LINE,45
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
***
* - -
         XR    R5,R5              Clear register
         LA    R5,10              Size of each NS table entry
         ST    R5,TABLESIZ        Store size of each table entry
* - -                             We'll stop the search at first blank
         SR    R4,R5              Point to Last Slot
         ST    R4,SAVLSLOT        Save location of last slot
         TM    OFFFLAG,X'04'      Is this just a contents display?
         BZ    NSCHANGX           No. We must do a real change.
         BAL   R9,DISPTABL        Yes. Just display.
         BAL   R9,CHANGED         Message that nothing changed.
         B     EOJ0
NSCHANGX DS    0H
         BAL   R9,DISPTABL        Search table for the proper entry.
         BAL   R9,SETTMODE        Do the Key 0 stuff
         BAL   R9,CHANGED         Tell em we changed the values.
         B     EOJ0
** ---------------------------------------------------------------- **
* ----------------------------------------------------------------- *
*     Various "abnormal ending" routines.                           *
* ----------------------------------------------------------------- *
NOTAUTH  DS    0H                     Command not authorized message.
         APUT  MESSAG2C,L'MESSAG2C
         APUT  MESSAG2D,L'MESSAG2D
         B     EOJC
* ----------------------------------------------------------------- *
NOE2     DS    0H                 No Parmlib-supplied table there.
         MVC   LINE,LINE-1
         MVC   LINE(L'MESSAGEP),MESSAGEP
         MVC   LINE+20(2),=C'E2'
         APUT  LINE,L'MESSAGEP
         B     EOJ4
* ----------------------------------------------------------------- *
NOE8     DS    0H                 No Parmlib-supplied table there.
         MVC   LINE,LINE-1
         MVC   LINE(L'MESSAGEP),MESSAGEP
         MVC   LINE+20(2),=C'E8'
         APUT  LINE,L'MESSAGEP
         B     EOJ4
* ----------------------------------------------------------------- *
NOAP     DS    0H                 No Parmlib-supplied table there.
         MVC   LINE,LINE-1
         MVC   LINE(L'MESSAGEP),MESSAGEP
         MVC   LINE+20(2),=C'AP'
         APUT  LINE,L'MESSAGEP
         B     EOJ4
* ----------------------------------------------------------------- *
NONS     DS    0H                 No Parmlib-supplied table there.
         MVC   LINE,LINE-1
         MVC   LINE(L'MESSAGEP),MESSAGEP
         MVC   LINE+20(2),=C'NS'
         APUT  LINE,L'MESSAGEP
         B     EOJ4
* ----------------------------------------------------------------- *
NOTNUMER DS    0H                 Message that a parm was not numeric
         MVC   LINE,LINE-1
         MVC   LINE(L'MESSAGEN),MESSAGEN
         MVC   LINE+21(1),0(R4)
         APUT  LINE,L'MESSAGEN
         B     EOJ4
** ---------------------------------------------------------------- **
**    Some of the Register and Pointer Save Areas                   **
** ---------------------------------------------------------------- **
SAVEPARM DC    F'0'                   Parm address from R1 at entry
SAVETPVT DC    F'0'                   Address of TPVT control block
SAVECTLT DC    F'0'                   Address of CTLT control block
SAVEFCVE DC    F'0'                   Address of Platcmd table if non-0
SAVEPPVE DC    F'0'                   Address of Platpgm table if non-0
SAVEUPT  DC    F'0'                   Address of UPT
SAVEECT  DC    F'0'                   Address of ECT
SAVEPSCB DC    F'0'                   Address of PSCB
SAVETNS  DC    F'0'                   Address of NS table
SAVETE2  DC    F'0'                   Address of E2 table
SAVETE8  DC    F'0'                   Address of E8 table
SAVETAP  DC    F'0'                   Address of AP table
SAVETNSL DC    H'0'                   Length of NS table, if nonzero
SAVETE2L DC    H'0'                   Length of E2 table, if nonzero
SAVETE8L DC    H'0'                   Length of E8 table, if nonzero
SAVETAPL DC    H'0'                   Length of AP table, if nonzero
SAVETCUR DC    H'0'                   Copied length of current table
SAVETNEW DC    H'0'                   Changed length of current table
** ---------------------------------------------------------------- **
FULLZERO DC    F'0'                   Fullword of numeric 0
FULLFOUR DC    F'4'                   Fullword 4
FULLEIGT DC    F'8'                   Fullowrd 8
FULLTWLV DC    F'12'                  Fullword 12
SAVE1401 DC    5F'0'                  More for safety
LWAADDR  DC    F'0'                   Address of LWA control block
* - - - - - - - - - - - - - - - - - - - - - - - - *
MOVOUTL  MVC   TABCODE(*-*),0(R1)     EXECUTED
MOVFSTN  MVC   FSTNAME(*-*),0(R3)     EXECUTED
MOVSNDN  MVC   SNDNAME(*-*),0(R1)     EXECUTED
MOVFNUM  MVC   FSTNUME(*-*),0(R3)     EXECUTED
PACK     PACK  WORKA,0(0,3)          <<< EXECUTED >>>
** ---------------------------------------------------------------- **
*          * - - - - - - - - - - - - - - - - - - - - - - - - *
*          *            S U B R O U T I N E S                *
*          * - - - - - - - - - - - - - - - - - - - - - - - - *
** ---------------------------------------------------------------- **
**  These are executed using a BAL R9,subroutn  instruction.        **
** ---------------------------------------------------------------- **
HEX      DS    0H
         ST    R9,SAVER9A
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         L     R9,SAVER9A
         BR    R9                    Return to caller
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
HEXSAVE  DS    3F                    Register save for HEX macro
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETNAMES DS    0H                  Get program name from parm.
         ST    R9,SAVER9B          Save BAL register
         ST    R2,SAVER2D          Save work register
GETNAMST DS    0H                  Get rid of leading blanks
         L     R1,CHARCONT         Point to start of character
         CLI   0(R1),X'40'         Is it a blank?
         BNE   GETNAMNZ            No. Get the entire name.
         LA    R1,1(,R1)           Yes. Bump start place one up.
         ST    R1,CHARCONT         And store the place away for now.
         C     R5,=F'1'            End of cmd buffer one away?
         BNH   EOJ4                Yes. Error.
         BCTR  R5,0                Subtract one from end count
         B     GETNAMST            And loop to find first non-blank.
GETNAMNZ DS    0H                  Got first non-blank. Get whole name.
         LA    R2,8                BCT initial quantity - 8 chars.
         LA    R8,0                Character count
         L     R1,CHARCONT         Load starting place
         LR    R4,R1               Initialize pointer
         LA    R4,0(,R4)           to first character of program name.
GETNAMLU DS    0H                  Loop to get entire name
         CLI   0(R4),X'40'         First blank?
         BE    GETNAMGT            Yes, got whole name.
         CLI   0(R4),X'00'         First hex zeros?
         BE    GETNAMGT            Yes, got whole name.
         CR    R8,R5               End of command buffer?
         BNL   GETNAMGT            Yes. Got all we can get.
         LA    R8,1(,R8)           Bump character counter.
         LA    R4,1(,R4)           Bump where we are.
         BCT   R2,GETNAMLU         Loop back.
GETNAMGT DS    0H
         ST    R8,SAVER8A          Save character count
         ST    R8,FSTCOUNT         Again.
         CLC   SAVER8A,=F'0'       Is character count (left) 0?
         BNE   GETREALY            No. Go on processing for name.
         BAL   R9,MISSPGM2         Say we're missing a program name.
         B     EOJ4                And get out with code = 4.
GETREALY DS    0H
         MVC   FSTCHALF(2),FSTCOUNT+2    Get halfword program length
         MVC   LINE,LINE-1               Print it in message
         HEX   LINE,4,SAVER8A
         MVC   LINE+13(17),=C'Length of command'
         APUT  LINE,30
         L     R3,CHARCONT         Load starting place again.
         BCTR  R8,0                One less for EXECUTE.
         MVC   FSTNAME(8),BLANKS   Blank entire target field.
         EX    R8,MOVFSTN          Move program name to target.
         OC    FSTNAME(8),BLANKS   Uppercase the program name.
         MVC   LINE,LINE-1         And print its name out.
         MVC   LINE(8),FSTNAME
         MVC   LINE+13(17),=C'New program name '
         APUT  LINE,30
* - >
GETNAMEN DS    0H                  Exit this routine.
         L     R2,SAVER2D          Restore work register
         L     R9,SAVER9B          Restore BAL register
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
CHANGED  DS    0H                     The "value was changed" message.
         ST    R9,SAVER9C
         TM    LPAFLAG,X'01'          Is the table within LPA?
         BO    CHANGEND               Yes. Change already shown.
         TM    FLAGZ,X'02'            Is parm number past end of table?
         BO    CHANGEDN               Yes. Bypass all operations here.
         TM    OFFFLAG,X'01'          Replacement?
         BO    CHANGEDA               Say what was replaced
         TM    OFFFLAG,X'02'          Blanking?
         BO    CHANGEDB               Say what was blanked
         TM    OFFFLAG,X'04'          Display?
         BO    CHANGEDD               Skip saying anything was changed.
         TM    OFFFLAG,X'08'          Change header to " PARMLIB"?
         BO    CHANGEDH               Write message that its done.
         TM    OFFFLAG,X'10'          Supply lengths in LWA?
         BO    CHANGEDK               Write appropriate messages.
         TM    OFFFLAG,X'20'          Zero lengths in LWA?
         BO    CHANGEDZ               Write appropriate messages.
*                                     X'40' dealt with in SETSTEPL
*                                     X'80' dealt with in NOTSTEPL
         B     CHANGEND
CHANGEDA DS    0H                     Replacing a table entry.
         MVC   LINE,LINE-1
         APUT  LINE,30
         APUT  MESSAGEC,L'MESSAGEC    Say "before making changes".
         MVC   MESSAG3A+5(4),TABENNUM+6
         MVC   MESSAG3A+13(2),CODEPLAC     Move in table code.
         MVC   MESSAG3A+42(8),FSTNAME      Move in program name.
         APUT  MESSAG3A,L'MESSAG3A    Tell em we changed the value.
         B     CHANGEND
CHANGEDB DS    0H                     Blanking a table entry.
         MVC   LINE,LINE-1
         APUT  LINE,30
         APUT  MESSAGEC,L'MESSAGEC    Say "before making changes".
         MVC   MESSAG3B+5(4),TABENNUM+6
         MVC   MESSAG3B+13(2),CODEPLAC     Move in table code.
         MVC   MESSAG3B+42(8),FSTNAME      Move in program name.
         APUT  MESSAG3B,L'MESSAG3B    Tell em we changed the value.
         B     CHANGEND
CHANGEDD DS    0H                     Displaying table entries (entry)
         TM    OFFFLAG,X'04'
         BZ    CHANGEDX               Not display? Say what's in slot.
         CLC   SLOTBIN,=F'0'          Display entire table?
         BE    CHANGEND               Don't say anything changed.
CHANGEDX DS    0H                     Say we're displaying 1 slot.
         MVC   LINE,LINE-1
         MVC   LINE(30),=C'Display of Slot contents.     '
         APUT  LINE,30
         B     CHANGEND
CHANGEDN DS    0H                     Say nothing changed.
         APUT  MESSAG2D,L'MESSAG2D
         B     CHANGEND
CHANGEDH DS    0H                 Putting " PARMLIB" in table header.
         TM    TIDFLAG,X'03'      Dealing with PC or PP?
         BNZ   CHANGEDN           Yes. Show nothing was changed.
         MVC   LINE,LINE-1
         APUT  LINE,30
         APUT  MESSAGEC,L'MESSAGEC       Say "before making changes".
         APUT  MESSAG3D,L'MESSAG3D
         BAL   R9,PRTABLHD        Table Header Display Routine
         B     CHANGEND
CHANGEDK DS    0H                 "Supply table lengths" message.
         TM    TIDFLAG,X'03'      Dealing with PC or PP?
         BNZ   CHANGEDN           Yes. Show nothing was changed.
         MVC   LINE,LINE-1               Print a blank line.
         APUT  LINE,30
         APUT  MESSAGEC,L'MESSAGEC       Say "before making changes".
         MVC   MESSAG3E+19(2),TABLEID    Put table id into message.
         HEX   MESSAG3E+48,2,SAVETCUR    Old message length
         CLC   TABLEID,=C'NS'            Is it the NS table?
         BE    CHANGK01
         HEX   MESSAG3E+60,2,SAVETNEW    8-byte table length
         B     CHANGK02
CHANGK01 DS    0H
         TM    SHBLFLG,X'01'
         BO    CHANGKA1
         HEX   MESSAG3E+60,2,TO10LENG    10-byte table length
         B     CHANGK02
CHANGKA1 DS    0H
         HEX   MESSAG3E+60,2,ME10LENG    10-byte table length
CHANGK02 DS    0H
         MVI   MESSAG3E+64,C'.'          Finish "table length" message.
         APUT  MESSAG3E,L'MESSAG3E
*                                        Message after change.
         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.
         HEX   MESSAG1A+57,2,SAVETNEW    New message length
         MVI   MESSAG1A+61,C'.'          Put period at end.
         APUT  MESSAG1A,L'MESSAG1A
         B     CHANGEND
CHANGEDZ DS    0H                 Zeroing table lengths in the LWA.
         TM    TIDFLAG,X'03'      Dealing with PC or PP?
         BNZ   CHANGEDN           Yes. Show nothing was changed.
         MVC   LINE,LINE-1
         APUT  LINE,30
         APUT  MESSAGEC,L'MESSAGEC       Say "before making changes"
         MVC   MESSAG3F+19(2),TABLEID
         HEX   MESSAG3F+33,2,SAVETNEW
         MVI   MESSAG3F+37,C'.'
         APUT  MESSAG3F,L'MESSAG3F
         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.
         APUT  MESSAG1B,L'MESSAG1B
         B     CHANGEND
CHANGEND DS    0H
         L     R9,SAVER9C
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
NAMEPARM DS    0H
         ST    R9,SAVER9D
         TM    LPADFLG,X'01'          Displaying LPA range?
         BO    NAMEPEND               Don't look for a number here.
*-*
         TM    OFFFLAG,X'08'          Just changing table header?
         BO    NAMEPEND               Yes. Then don't look for number.
*-*
*-*-*
         TM    OFFFLAG,X'10'          Supply table length in LWA.
         BO    NAMEPEND               Yes. Then don't look for number.
*-*-*
*-*-*-*
         TM    OFFFLAG,X'20'          Zero table length in LWA.
         BO    NAMEPEND               Yes. Then don't look for number.
*-*-*-*
*-*-*-*-*
         TM    OFFFLAG,X'40'          Set on STEPLIB flag for table?
         BO    NAMEPEND               Yes. Then don't look for number.
*-*-*-*-*
*-*-*-*-*-*
         TM    OFFFLAG,X'80'          Set off STEPLIB flag for table?
         BO    NAMEPEND               Yes. Then don't look for number.
*-*-*-*-*-*
         L     R8,SAVER8A             Get number of characters used
         CR    R8,R5                  More than what's left?
         BNL   NAMEBAD1               Yes. Error.
         C     R5,=F'3'               Is end bigger than 3?
         BNH   NAMEBAD1               No. Error.
NAMEGOOD DS    0H
         S     R5,=F'3'               Subtract 3 from number till end.
         BAL   R9,GETNUMES            Get the number of the pgm entry.
         TM    OFFFLAG,X'02'          Are we blanking?
         BO    NAMEPEND               Yes. Don't need a name parameter
         TM    OFFFLAG,X'04'          Displaying?
         BO    NAMEPEND               Yes. No names wanted.
         BAL   R9,GETNAMES            Get the name of pgm to shove in.
         B     NAMEPEND
NAMEBAD1 DS    0H                     Get here if there's no parameter.
         TM    OFFFLAG,X'04'          Are we displaying?
         BO    NAMEPEND               No error. Just get out normally.
         TM    OFFFLAG,X'02'
         BO    NAMEBAD2
         BAL   R9,MISSPGM1            We're replacing. Ask for both.
         B     EOJ4                   RC = 4
NAMEBAD2 DS    0H
         BAL   R9,MISSPGM3
         B     EOJ4                   RC = 4
NAMEPEND DS    0H
         L     R9,SAVER9D
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
ADJNEXTP DS    0H                     Get to first blank
         ST    R9,SAVER9E
         MVC   CHARSTRT,CHARCONT      Set up
         L     R1,CHARSTRT
SEEIFENX DS    0H                     Loop
         CLI   0(R1),X'40'            First blank?
         BE    SEEIFENZ               Yes, then end.
         LA    R1,1(,R1)              Bump to next character
         ST    R1,CHARSTRT            Store address away
         B     SEEIFENX               Loop back
SEEIFENZ DS    0H
         L     R9,SAVER9E
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         LTORG
************************************************************
PGMTITLE DS    0H                     Display program name
         ST    R9,SAVER9F
         MVC   LINE,LINE-1            Blank line
         MVC   LINE,MESSAGET          Move title line in
         MVC   LINE+56(8),VERS#       Version number into title
         APUT  LINE,L'MESSAGET        And put out to tube
         MVC   LINE,LINE-1            Blank line again
         MVC   LINE,MESSAGEU          Move underlines in
         APUT  LINE,L'MESSAGEU        And put them out also
         L     R9,SAVER9F
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
SETTMODE DS    0H                  Routine that does Key 0 stuff.
         ST    R9,SAVER9G
         TM    FLAGZ,X'02'         Is parm number past end of table?
         BO    SETTMEND            Yes. Don't do key zero operations.
         TM    LPAFLAG,X'01'       Is the table in LPA region?
         BO    SETTMEND            Yes. Do not attempt to change it.
* -- >       Test if this command is being run APF Authorized
         STM   R15,R1,SAVE1401     Now save registers and test if APF
         XR    R15,R15                  authorized.
         TESTAUTH FCTN=1           Are we authorized?
         LTR   R15,R15             Test the return code.
         BNZ   NOTAUTH             Not zero, tell not authorized.
         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.
* -- >
* -- >      Key Zero ---- Here's where we change the stuff.
KZ       MODESET KEY=ZERO
* -
         TM    OFFFLAG,X'04'       Only displaying entr(ies)?
         BNZ   ENDKZ               Yes. No Key 0 stuff done.
         CLI   LPAFLAG,X'01'       Did the table come from LPALIB?
         BE    ENDKZ               Yes. Don't try to alter table.
         TM    NSCHFLG,X'01'       Are we doing the NS table?
         BO    TENSLOT             Yes. Handle its special needs.
EIGHSLOT DS    0H                  8-character tables.
*-*                                Altering table header only
         TM    OFFFLAG,X'08'       Alter table header?
         BZ    GONOHDRA            No. Escape this section.
         TM    TIDFLAG,X'03'       Dealing with PC or PP?
         BNZ   GONOHDRA            Yes. Show nothing was changed.
         L     R3,HDRADDR          Load header address
         MVC   8(8,R3),=C' PARMLIB'  Move in standard table header.
         B     ENDKZ               Get out of supervisor state.
GONOHDRA DS    0H
*-*
*-*-*
         TM    OFFFLAG,X'30'       Supplying length to LWA field?
         BZ    GONZLWA1            No. Don't do this routine.
         BAL   R9,MEASUR08         Measure it.
         BAL   R9,WHERSIZE         Load size into proper place in LWA.
         B     ENDKZ               Get out of supervisor state.
GONZLWA1 DS    0H
*-*-*
*-*-*-*-*
         TM    OFFFLAG,X'40'       Set STEPLIB flag in LWA for table?
         BZ    NOGSTEP1            No. Skip step.
         BAL   R9,SETSTEPL         Set the STEPLIB flag on.
         B     ENDKZ               Get out of supervisor state.
NOGSTEP1 DS    0H
*-*-*-*-*
*-*-*-*-*-*
         TM    OFFFLAG,X'80'       STEPLIB flag off in LWA for table?
         BZ    NOGSTOF1            No. Skip step.
         BAL   R9,NOTSTEPL         Set the STEPLIB flag off.
         B     ENDKZ               Get out of supervisor state.
NOGSTOF1 DS    0H
*-*-*-*-*-*
         L     R3,OURSLOT          Address of slot to replace name in.
         TM    OFFFLAG,X'01'       Replacing function here?
         BZ    BLANKIT             No. Do blanking function.
         CLC   FSTNAME,BLANKS      Yes. Is new entry non-blank?
         BE    ENDKZ               No. It is blank. Nothing to do.
         MVC   0(8,R3),FSTNAME     Non-blank. Move in new pgm name.
         B     ENDKZ               And get out.
BLANKIT  DS    0H                  Blank an 8-character table entry
         TM    OFFFLAG,X'02'       Blanking function here?
         BZ    ENDKZ               No. Can't do anything.
         L     R3,OURSLOT          Address of slot entry to blank
         MVC   0(8,R3),BLANKS      Move the blanks in.
         B     ENDKZ               And get out.
TENSLOT  DS    0H                  10-character tables.
         L     R3,OURSLOT          Address of slot to replace name in.
         TM    OFFFLAG,X'01'       Replacing function here?
         BZ    BLANKTEN            No. Do blanking function.
         CLC   FSTNAME,BLANKS      Yes. Is new entry non-blank?
         BE    ENDKZ               No. It is blank. Nothing to do.
         MVC   0(2,R3),FSTCHALF    Put length of the new program name.
         MVC   2(8,R3),FSTNAME     Put in the new program name.
         B     ENDKZ               Get out of supervisor state.
BLANKTEN DS    0H                  Blank the 10-character table entry
*-*                                Altering table header only
         TM    OFFFLAG,X'08'       Alter table header?
         BZ    GONOHDRB            No. Escape this section.
         TM    TIDFLAG,X'03'       Dealing with PC or PP?
         BNZ   GONOHDRB            Yes. Show nothing was changed.
         L     R3,HDRADDR          Load header address
         MVC   8(8,R3),=C' PARMLIB'  Move in standard table header.
         B     ENDKZ               Get out of supervisor state.
GONOHDRB DS    0H
*-*
*-*-*
         TM    OFFFLAG,X'30'       Supplying length to LWA field?
         BZ    GONZLWA2            No. Don't do this routine.
         BAL   R9,MEASUR10         Measure it.
         BAL   R9,WHERSIZE         Load size into proper place in LWA.
         B     ENDKZ               Get out of supervisor state.
GONZLWA2 DS    0H
*-*-*
*-*-*-*-*
         TM    OFFFLAG,X'40'       Set STEPLIB flag in LWA for table?
         BZ    NOGSTEP2            No. Skip step.
         BAL   R9,SETSTEPL         Set the STEPLIB flag.
         B     ENDKZ               Get out of supervisor state.
NOGSTEP2 DS    0H
*-*-*-*-*
*-*-*-*-*-*
         TM    OFFFLAG,X'80'       STEPLIB flag off in LWA for table?
         BZ    NOGSTOF2            No. Skip step.
         BAL   R9,NOTSTEPL         Set the STEPLIB flag off.
         B     ENDKZ               Get out of supervisor state.
NOGSTOF2 DS    0H
*-*-*-*-*-*
         TM    OFFFLAG,X'02'       Blanking function here?
         BZ    ENDKZ               No. Can't do anything.
         L     R3,OURSLOT          Address of slot entry to blank.
         MVC   0(2,R3),=X'0000'    Move X'FFFF' to mark table end
         MVC   2(8,R3),BLANKS      And move the blanks to pgm name slot
         B     ENDKZ               Get out of supervisor state.
ENDKZ    DS    0H                  Get ready to get out of Key 0.
* -
NZ       MODESET KEY=NZERO
* -- >      Back to ordinary life ----
SETTMEND DS    0H                  Bypass Key 0 stuff.
         L     R9,SAVER9G
         BR    R9                  Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
ERRORCOD DS    0H                  Give instructions if wrong things
*                                   were entered, how to do it right.
         ST    R9,SAVER9H
         TM    LPADFLG,X'01'
         BO    ERRORCOE
         MVC   LINE,LINE-1
         APUT  LINE,30
         APUT  MESSA11L,L'MESSA11L
         APUT  MESSA11M,L'MESSA11M
         APUT  MESSA11P,L'MESSA11P
         APUT  MESSA11A,L'MESSA11A
         MVC   LINE,LINE-1
         APUT  LINE,30
         APUT  MESSA11C,L'MESSA11C
         APUT  MESSA11D,L'MESSA11D
         APUT  MESSA11Z,L'MESSA11Z
         APUT  MESSA11Y,L'MESSA11Y
         APUT  MESSA11X,L'MESSA11X
         APUT  MESSA11F,L'MESSA11F
         MVC   LINE,LINE-1
         APUT  LINE,30
         APUT  MESSA11I,L'MESSA11I
         APUT  MESSA11K,L'MESSA11K
         APUT  MESSA11J,L'MESSA11J
         APUT  MESSA11N,L'MESSA11N
         APUT  MESSA11Q,L'MESSA11Q
         APUT  MESSA11O,L'MESSA11O
*        MVC   LINE,LINE-1
*        APUT  LINE,30
ERRORCOE DS    0H
         L     R9,SAVER9H
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MISSPGM1 DS    0H                     Supply a slot number & pgm name.
         ST    R9,SAVER9I
         MVC   LINE,LINE-1
         APUT  MESSA11G,L'MESSA11G
         L     R9,SAVER9I
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MISSPGM2 DS    0H                     Supply a program name to put in.
         ST    R9,SAVER9J
         MVC   LINE,LINE-1
         APUT  MESSA11E,L'MESSA11E
         L     R9,SAVER9J
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MISSPGM3 DS    0H                     Supply a slot number to Blank.
         ST    R9,SAVER9N
         MVC   LINE,LINE-1
         APUT  MESSA12Q,L'MESSA12Q
         L     R9,SAVER9N
         BR    R9                     Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
DISPTABL DS    0H                Scan thru the particular table....
         ST    R9,SAVER9L          Save BAL register
         ST    R3,SAVER3A          Save
         ST    R4,SAVER4A             the
         ST    R5,SAVER5A                work
         ST    R2,SAVER2G                   registers.
*-*
         TM    OFFFLAG,X'08'     Just altering table header?
         BO    DISPTSKP          Yes. Don't display table at all.
*-*
*-*-*
         TM    OFFFLAG,X'10'     Just supplying an LWA size?
         BO    DISPTSKP          Yes. Don't display table at all.
*-*-*
*-*-*-*
         TM    OFFFLAG,X'20'     Zeroing out LWA size?
         BO    DISPTSKP          Yes. Don't display table at all.
*-*-*-*
*-*-*-*-*
         TM    OFFFLAG,X'40'     Setting table to come from STEPLIB?
         BO    DISPTSKP          Yes. Don't display table at all.
*-*-*-*-*
*-*-*-*-*-*
         TM    OFFFLAG,X'80'     Setting table not from STEPLIB?
         BO    DISPTSKP          Yes. Don't display table at all.
*-*-*-*-*-*
         XR    R3,R3               Zero
         XR    R5,R5                  work
         XR    R2,R2                     registers.
DISPTSTR DS    0H
         L     R3,TABLSTRT         Load start address of table
         L     R2,TABLENUM         Load number of entries in table
         L     R5,TABLESIZ         Load size of each entry
         LA    R4,1                Start slot number count at 1
         ST    R4,SLOTNOW          Store slot number count away
         ST    R3,OURSLOT          Initialize slot address.
         CLC   SLOTBIN,=F'0'       If there's no slot num in parameter
         BE    DISPTLUP            Then bypass error checking
         C     R2,SLOTBIN          Compare table size to parm number
         BNL   DISPTLUP            If parm number is LE, then display
DISPTERR DS    0H                  Else error message and out.
         MVC   LINE,LINE-1
         MVC   LINE(22),=C'Slot number specified '
         L     R1,SLOTBIN          Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+22(10),MASK10  Move in the mask
         ED    LINE+22(10),CVDAREA+3 Make it pretty
         MVC   LINE+34(26),=C'is bigger than table size '
         L     R1,TABLENUM         Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+60(10),MASK10  Move in the mask
         ED    LINE+60(10),CVDAREA+3 Make it pretty
         APUT  LINE,72
         B     EOJ4
DISPTLUP DS    0H                  Loop thru the table entries.
         MVC   LINE,LINE-1
         MVC   LINE(2),CODEPLAC    Move in table code.
         MVC   LINE+3(19),=C'Table Entry Number:'
         CVD   R4,CVDAREA          Convert count to printable
         MVC   LINE+22(10),MASK10  Move in the mask
         ED    LINE+22(10),CVDAREA+3 Make it pretty
         MVC   TABENNUM(10),MASK10      Preserve printable slot number
         ED    TABENNUM(10),CVDAREA+3
         TM    NSCHFLG,X'01'       Is this the 10-byte NS table entry?
         BO    DISPTBNS            Yes. Handle separately.
         MVC   LINE+34(8),0(R3)
         CLC   LINE+34(8),BLANKS   Is this a blank entry.
         BNE   DISPTBLK            No.
         MVC   LINE+34(8),=C'*empty* '   Yes. Don't just show blanks.
         OI    FLAGZ,X'01'         We found a blank table entry.
         TM    FLAGZ,X'04'         Do we have table lengths?
         BO    DISPTBLK            Yes, then use the table lengths
* -------                           that we have.
*                                  No table lengths here. So....
         ST    R3,OURSLOT          Preserve empty slot address
         ST    R4,SLOTNOW          Also preserve this slot number.
         B     DISPTYES            And then stop on first blank.
DISPTBNS DS    0H
         HEX   LINE+34,2,0(R3)     Display size of this entry
         MVC   LINE+40(8),2(R3)    Move in program name to slot
         CLC   LINE+40(8),BLANKS   Is this a blank entry.
         BNE   DISPTBLK            No.
         MVC   LINE+40(8),=C'*empty* '   Yes. Don't just show blanks.
         OI    FLAGZ,X'01'         We found a blank table entry.
         TM    FLAGZ,X'04'         Do we have table lengths?
         BO    DISPTBLK            Yes, then use the table lengths
* -------                           that we have.
*                                  No table lengths here. So....
         ST    R3,OURSLOT          Preserve empty slot address
         ST    R4,SLOTNOW          Also preserve this slot number.
         B     DISPTYES            And then stop on first blank.
DISPTBLK DS    0H                  Search each slot number.
         CLC   SLOTBIN,=F'0'       Has a slot number been specified?
         BE    DISPTYES            No. Just display all the slots.
         CLC   SLOTBIN,SLOTNOW     Yes. Then are we at the one we want?
         BNE   DISPTNOT            No. Just go further and search.
         OI    FLAGZ,X'08'         We're at the desired slot.
* ---  Save contents of the current slot which was found - below
         ST    R3,OURSLOT          Preserve this slot's address
         LR    R1,R5               Load table entry size
         BCTR  R1,0                One less for execute
         EX    R1,MOVESLOT         Save contents of slot for kicks
         B     DISPTPEX               Branch past executed instruction
MOVESLOT MVC   SLOTSAVE(*-*),0(R3)    EXECUTED
DISPTPEX DS    0H
* ---  Save contents of the current slot which was found - above
DISPTYES DS    0H                  Print this slot entry
         APUT  LINE,52
         TM    FLAGZ,X'01'         Is this a blank table entry?
         BO    DISPTEND            Yes, end the table search.
         TM    FLAGZ,X'08'         Are we at the slot # we specified?
         BO    DISPTEND            Yes. Stop the search.
DISPTNOT DS    0H                  Bump to next slot and loop back.
         C     R3,TABLEND          Compare to end from adding bytes.
         BH    DISPTEND            Past it, then end the search.
         LA    R3,0(R5,R3)         Bump to next slot
         ST    R3,OURSLOT          Store its address - important....
         LA    R4,1(,R4)           Bump count of slot number
         ST    R4,SLOTNOW          Store new slot number away
         ST    R2,SAVER2E
         BCT   R2,DISPTLUP         And loop to examine the new slot.
*
DISPTEND DS    0H                  END OF TABLE SEARCH ROUTINE
* - >                              Display message if desired slot is
* - >                               past the end of the table.
         CLC   SLOTBIN,SLOTNOW     Is the parm number past the end?
         BNH   DISPTNOP            No. Don't report a problem.
         L     R1,SLOTBIN          Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+22(10),MASK10  Move in the mask
         ED    LINE+22(10),CVDAREA+3 Make it pretty
         MVC   LINE+34(26),=C'exceeds scanned table size'
         L     R1,SLOTNOW          Display field
         CVD   R1,CVDAREA          Convert count to printable
         MVC   LINE+60(10),MASK10  Move in the mask
         ED    LINE+60(10),CVDAREA+3 Make it pretty
         APUT  LINE,72
         OI    FLAGZ,X'02'         Flag a problem situation.
DISPTNOP DS    0H
DISPTSKP DS    0H
* - >
         L     R3,SAVER3A          Restore all the work registers.
         L     R4,SAVER4A
         L     R5,SAVER5A
         L     R2,SAVER2G
         L     R9,SAVER9L          Restore the BAL register.
         BR    R9                  Return to caller
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETNUMES DS    0H                  Get the number after the table code
         ST    R9,SAVER9M           + the action code. If it exists.
         ST    R2,SAVER2F
GETNUMST DS    0H                  Get rid of leading blanks
         L     R1,CHARCONT         Point to start of character
         CLI   0(R1),X'40'         Is it a blank?
         BNE   GETNUMNZ            No. Get the entire name.
         LA    R1,1(,R1)           Yes. Bump start place one up.
         ST    R1,CHARCONT         And store the place away for now.
         C     R5,=F'1'            End of cmd buffer one away?
         BNH   EOJ4                Yes. Error.
         S     R5,=F'1'            Subtract one from end count
         B     GETNUMST            And loop to find first non-blank.
GETNUMNZ DS    0H                  Got first non-blank. Get whole name.
         LA    R2,5                BCT initial quantity - 5 chars.
         LA    R8,0                Character count
         L     R1,CHARCONT         Load starting place
         LR    R4,R1               Initialize pointer
         LA    R4,0(,R4)           to first character of program number
GETNUMLU DS    0H                  Loop to get entire number
         CLI   0(R4),X'40'         First blank?
         BE    GETNUMGT            Yes, got whole number
         CLI   0(R4),X'00'         First hex zeros?
         BE    GETNUMGT            Yes, got whole number
         CR    R8,R5               End of command buffer?
         BNL   GETNUMGT            Yes. Got all we can get.
* --                               Test EBCDIC number if numeric.
         CLI   0(R4),X'F0'         Check character if numeric digit.
         BL    NOTNUMER            Less than X'F0', not a number.
         CLI   0(R4),X'F9'         More than X'F9'?
         BH    NOTNUMER            Not a number.
* --
         LA    R8,1(,R8)           Bump character counter.
         LA    R4,1(,R4)           Bump where we are.
         BCT   R2,GETNUMLU         Loop back.
GETNUMGT DS    0H                  Got the whole number - examine it.
         ST    R8,SAVER8A
         ST    R8,FSTNOUNT         Get halfword value of slot number
         MVC   FSTNHALF(2),FSTNOUNT+2
         L     R3,CHARCONT
         BCTR  R8,0                One less for EXECUTE
         MVC   FSTFIELD(8),BLANKS  5-char number plus 3 blanks
         EX    R8,MOVFNUM          Get the number from the parm
         EX    R8,PACK             Convert it to packed
         CVB   R0,WORKA            Convert it to Binary
         ST    R0,SLOTBIN          Store the value for later use
         MVC   LINE,LINE-1
         MVC   LINE(8),FSTFIELD    8-char number with blanks
         MVC   LINE+13(19),=C'Entry slot number  '
         APUT  LINE,32
         LA    R8,1(,R8)           Restore number of chars after EX
         ST    R8,CHARSIZE         Save this value off.
         AR    R3,R8               Add it to R3 so we start past it.
         ST    R3,CHARCONT         Store start value for next parm.
GETNUMEN DS    0H
         L     R2,SAVER2F
         L     R9,SAVER9M
         BR    R9
* ----------------------------------------------------------------- *
*      Measure "8-byte entry" loaded table.                         *
* ----------------------------------------------------------------- *
*      R5 contains the entry point of the table.                    *
* ----------------------------------------------------------------- *
MEASUR08 DS    0H                 R5 has beginning address of table.
         ST    R9,SAVER9O           Save BAL register
         ST    R5,SAVER5D           Save work register
         ST    R4,SAVER4B           Save work register
         L     R5,TABLADDR          Load start of table
         XC    BLNKCNT,BLNKCNT      Zero the counters
         XC    NTRYCNT,NTRYCNT
         LA    R4,16                Count size of header
         LA    R5,16(,R5)           Bump past header
ME08LOOP DS    0H
*     Try (real hard) to detect the end of the table  -  below
         MVC   SAVECHAR(1),0(R5)    Save first character
         CLC   =C'        ',0(R5)   Is this table entry a blank?
         BE    ME08BLNK             Yes. Reached virtual end of table
         CLC   ZEROES8(8),0(R5)     Is this "entry" hex zeros?
         BE    ME08NOBL             Yes. Reached possible junk storage
         CLC   =C' ',0(R5)          Is first character blank?
         BE    ME08NOBL             Yes, not a valid table entry.
         TR    SAVECHAR,TRTPGMNM    Check first char if appropriate.
         CLI   SAVECHAR,X'02'       Not. probably end of table.
         BE    ME08NOBL
         CLC   =C'IKJEFTE2',0(R5)
         BE    ME08NOBL
         CLC   =C'IKJEFTE8',0(R5)
         BE    ME08NOBL
         CLC   =C'IKJEFTAP',0(R5)
         BE    ME08NOBL
         CLC   =C'IKJEFTNS',0(R5)
         BE    ME08NOBL
*     Try (real hard) to detect the end of the table  -  above
         LA    R4,8(,R4)            Count next table entry
         LA    R5,8(,R5)            Bump to next entry
         L     R1,NTRYCNT           Increment "entry count" counter
         A     R1,=F'1'
         ST    R1,NTRYCNT
         B     ME08LOOP             Loop back till perceived table end
ME08BLNK DS    0H
         LA    R4,8(,R4)            Add length of blank entry
         LA    R5,8(,R5)            Bump past blank entry.
         L     R1,BLNKCNT           Increment "blank entry" counter
         A     R1,=F'1'
         ST    R1,BLNKCNT
ME08NOBL DS    0H
         STH   R4,ME08LENG          Store measured length of table.
         ST    R5,ME08END           And record address of table end.
         BAL   R9,MESBLK08          Measure more blanks after table.
         TM    MEASFLG,X'01'        Been here already?
         BO    ME08NOSH             Don't show count again.
         BAL   R9,ENTRYDSP          Show number of entries.
ME08NOSH DS    0H
         OI    MEASFLG,X'01'        Show we did this once.
         L     R4,SAVER4B           Restore work register
         L     R5,SAVER5D           Restore work register
         L     R9,SAVER9O           Restore BAL register
         BR    R9
ME08END  DS    F                    Store end-of-table address
ME08LENG DS    H                    Store table length
BL08LENG DS    H                    Store length of blanks
TO08LENG DS    H                    Store total, nonblank+blank
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MESBLK08 DS    0H                   See how many more blanks we have.
         ST    R9,SAVER9Y           Save BAL register
         ST    R5,SAVER5E           Save work register
         L     R5,ME08END           Start at measured end of table.
MESBLL08 DS    0H                   Loop
         CLC   =C'        ',0(R5)   Is this entry a blank?
         BNE   MESBLE08             Yes. Stop counting blanks.
         CLC   BLNKCNT,MAXBLANK     Have we exceeded the maximum guess?
         BH    MESBLE08             Yes. Don't find more blanks.
         L     R1,BLNKCNT           Increment "blank entry" counter
         A     R1,=F'1'
         ST    R1,BLNKCNT
         LA    R5,8(,R5)            Bump to next entry.
         B     MESBLL08             Loop until no blanks or max.
MESBLE08 DS    0H
         L     R1,BLNKCNT           Total count of found blanks
         LTR   R1,R1
         BZ    MESBLX08
         BCTR  R1,0                 Really one less
MESBLX08 DS    0H
         SLL   R1,3                 Multiply by 8
         STH   R1,BL08LENG          Length of blank entries
         AH    R1,ME08LENG          Add length of non-blank entries
         STH   R1,TO08LENG          Total length of both
*>*----
*        STM   R14,R1,SAVE1401      Save registers 14 thru 1.
*        MVC   LINE,LINE-1
*        HEX   LINE,2,ME08LENG
*        HEX   LINE+10,2,BL08LENG
*        HEX   LINE+20,2,TO08LENG
*        APUT  LINE,30
*        LM    R14,R1,SAVE1401      Load registers 14 thru 1.
*>*----
         L     R5,SAVER5E           Restore work register
         L     R9,SAVER9Y           Restore BAL register
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* ----------------------------------------------------------------- *
*      Measure "10-byte entry" loaded table.                        *
* ----------------------------------------------------------------- *
*      R5 contains the entry point of the table.                    *
* ----------------------------------------------------------------- *
MEASUR10 DS    0H                 R5 has beginning address of table.
         ST    R9,SAVER9P           Save BAL register
         ST    R5,SAVER5D           Save work register
         ST    R4,SAVER4B           Save work register
         L     R5,TABLADDR          Load start of table
         XC    BLNKCNT,BLNKCNT      Zero the counters
         XC    NTRYCNT,NTRYCNT
         LA    R4,16                Count size of header
         LA    R5,16(,R5)           Bump past header
ME10LOOP DS    0H
         MVC   SAVECHAR(1),2(R5)    Save first character of pgm name
         MVC   SAVECH08(1),9(R5)    Save last character of pgm name
         CLC   BLKSTRNG(10),0(R5)   Full blank entry here?
         BE    ME10BLNK             Yes. Count the blank entry.
         CLC   ENDSTRNG(10),0(R5)   FFFF plus blank pgm name?
         BE    ME10BLNK             Yes. Can still be considered blank.
         CLC   =X'0000',0(R5)       Test-test-test-test-test
         BE    ME10TEST             Test rest of "entry
         B     ME10REST             Not zeros, go on.
ME10TEST DS    0H
         TR    SAVECHAR,TRTPGMNM    Check for strange character.
         CLI   SAVECHAR,X'02'       Is it strange?
         BE    ME10NOBL             Yes. This is not a blank entry.
ME10REST DS    0H
         CLC   =X'FFFF',0(R5)       Test for end string separately.
         BNE   ME10TES2             Not. Not at virtual end of table
         B     ME10NOBL             FFFF alone. Not a blank entry.
ME10TES2 DS    0H
         TR    SAVECHAR,TRTPGMNM    Check first char not upcase alpha.
         CLI   SAVECHAR,X'02'       Not. probably end of table.
         BE    ME10NOBL
         TR    SAVECH08,TRTPGMNM    Check last char not upcase alpha.
         CLI   SAVECH08,X'02'       Not. probably end of table.
         BE    ME10NOBL
         LA    R4,10(,R4)           Count next table entry
         LA    R5,10(,R5)           Bump to next entry
         L     R1,NTRYCNT           Increment "entry count" counter
         A     R1,=F'1'
         ST    R1,NTRYCNT
         B     ME10LOOP             Finished this entry, try for more.
ME10BLNK DS    0H
         LA    R4,10(,R4)           Add length of blank entry
         LA    R5,10(,R5)           Bump past blank entry.
         L     R1,BLNKCNT           Increment "blank entry" counter
         A     R1,=F'1'
         ST    R1,BLNKCNT
ME10NOBL DS    0H
         STH   R4,ME10LENG          Store measured length of table.
         ST    R5,ME10END           And record address of table end.
         BAL   R9,MESBLK10          Measure more blanks after table.
         TM    MEASFLG,X'01'        Been here already?
         BO    ME10NOSH             Don't show count again.
         BAL   R9,ENTRYDSP          Show number of entries.
ME10NOSH DS    0H
         OI    MEASFLG,X'01'        Show we did this once.
         L     R4,SAVER4B           Restore work register
         L     R5,SAVER5D           Restore work register
         L     R9,SAVER9P           Restore BAL register
         BR    R9
ME10END  DS    F                    Store end-of-table address
ME10LENG DS    H                    Store table length
BL10LENG DS    H                    Store length of blanks
TO10LENG DS    H                    Store total, nonblank+blank
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
MESBLK10 DS    0H                   See how many more blanks we have.
         ST    R9,SAVER9Y           Save BAL register
         ST    R5,SAVER5E           Save work register
         L     R5,ME10END           Start at measured end of table.
MESBLL10 DS    0H                   Loop
         CLC   =C'        ',2(R5)   Is this entry a blank entry?
         BNE   MESBLE10             No. End of perceived blanks.
         CLC   =X'0000',0(R5)       Length is zero?
         BNE   MESBLE10             No. End of perceived blanks.
         CLC   =X'FFFF',0(R5)       Real table end?
         BE    MESBLE10             Yes. Consider it end of table.
         CLC   BLNKCNT,MAXBLANK     Have we exceeded the maximum guess?
         BH    MESBLE10             Yes. Don't find more blanks.
         L     R1,BLNKCNT           Increment "blank entry" counter
         A     R1,=F'1'
         ST    R1,BLNKCNT
         LA    R5,10(,R5)           Bump to next entry.
         B     MESBLL10             Loop until no blanks or max.
MESBLE10 DS    0H
         L     R1,BLNKCNT           Number of blank entries
         LTR   R1,R1
         BZ    MESBLX10
         BCTR  R1,0                 Really one less
MESBLX10 DS    0H
         STM   R2,R3,SAVER23        Save work registers
         XR    R2,R2                Clear R2
         XR    R3,R3                Clear R3
         LR    R3,R1                Dump count into R2 for mult.
         M     R2,=F'10'            Multiply by entry size
         STH   R3,BL10LENG          Store length of blank entries
         AH    R3,ME10LENG          Add length of non-blank entries
         STH   R3,TO10LENG          Total length of both
         LM    R2,R3,SAVER23        Restore work registers
*>*----
*        STM   R14,R1,SAVE1401      Save registers 14 thru 1.
*        MVC   LINE,LINE-1
*        HEX   LINE,2,ME10LENG
*        HEX   LINE+10,2,BL10LENG
*        HEX   LINE+20,2,TO10LENG
*        HEX   LINE+30,4,BLNKCNT
*        APUT  LINE,50
*        LM    R14,R1,SAVE1401      Load registers 14 thru 1.
*>*----
         L     R5,SAVER5E           Restore work register
         L     R9,SAVER9Y           Restore BAL register
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
* ------------------------------------------------------------------ *
WHERSIZE DS    0H                   Point to size field to update.
* ------------------------------------------------------------------ *
*    This is executed after MEASUR08 or MEASUR10.                    *
*    The idea here is to update the appropriate length field for     *
*      the appropriate table, after having measured the size.        *
*    This routine is also used for zeroing the table lengths.        *
*    This routine is executed in supervisor state. Called from       *
*      the SETTMODE routine.                                         *
* ------------------------------------------------------------------ *
*   ***  Note:  We unconditionally update the table lengths.  ***    *
* ------------------------------------------------------------------ *
         ST    R9,SAVER9Q           Save BAL register
         ST    R2,SAVER2B           Save work registers
         ST    R3,SAVER3C
         TM    OFFFLAG,X'30'        Are we updating or zeroing lengths?
         BZ    WHEREXIT             No. We have no business here.
         L     R2,LWAADDR           Point to the Logon Work Area.
         USING LWA,R2               Address its fields.
*-----------------------------*
WHERCHUZ DS    0H                   Which table are we dealing with?
*-----------------------------*
         TM    TIDFLAG,X'20'           E2?
         BO    WHERE2
         TM    TIDFLAG,X'10'           E8?
         BO    WHERE8
         TM    TIDFLAG,X'80'           AP?
         BO    WHERAP
         TM    TIDFLAG,X'40'           NS?
         BO    WHERNS
         B     WHEREXIT
*-----------------------------*
WHERE2   DS    0H                      Update E2 length
         TM    SHBLFLG,X'01'
         BO    WHERE2SH
         MVC   LWATE2LN(2),TO08LENG    Move length to LWA
         MVC   SAVETNEW(2),TO08LENG    Save length for message
         B     WHERE2E
WHERE2SH DS    0H
         MVC   LWATE2LN(2),ME08LENG    Move length to LWA
         MVC   SAVETNEW(2),ME08LENG    Save length for message
WHERE2E  DS    0H
*-*-*-*
WHERE2Z  DS    0H                      If zeroing, then zero E2 length
         TM    OFFFLAG,X'20'           Zeroing length?
         BZ    WHE2NOZ1                No. Bypass this.
         MVC   LWATE2LN(2),=X'0000'    Move length to LWA
         MVC   SAVETNEW(2),=X'0000'    Save length for message
WHE2NOZ1 DS    0H
*-*-*-*
         B     WHEREXIT                Finished, get out of routine.
*-----------------------------*
WHERE8   DS    0H                      Update E8 length
         TM    SHBLFLG,X'01'
         BO    WHERE8SH
         MVC   LWATE8LN(2),TO08LENG    Move length to LWA
         MVC   SAVETNEW(2),TO08LENG    Save length for message
         B     WHERE8E
WHERE8SH DS    0H
         MVC   LWATE8LN(2),ME08LENG    Move length to LWA
         MVC   SAVETNEW(2),ME08LENG    Save length for message
WHERE8E  DS    0H
*-*-*-*
WHERE8Z  DS    0H                      If zeroing, then zero E8 length
         TM    OFFFLAG,X'20'           Zeroing length?
         BZ    WHE8NOZ1                No. Bypass this.
         MVC   LWATE8LN(2),=X'0000'    Move length to LWA
         MVC   SAVETNEW(2),=X'0000'    Save length for message
WHE8NOZ1 DS    0H
*-*-*-*
         B     WHEREXIT                Finished, get out of routine.
*-----------------------------*
WHERAP   DS    0H                      Update AP length
         TM    SHBLFLG,X'01'
         BO    WHERAPSH
         MVC   LWATAPLN(2),TO08LENG    Move length to LWA
         MVC   SAVETNEW(2),TO08LENG    Save length for message
         B     WHERAPE
WHERAPSH DS    0H
         MVC   LWATAPLN(2),ME08LENG    Move length to LWA
         MVC   SAVETNEW(2),ME08LENG    Save length for message
WHERAPE  DS    0H
*-*-*-*
WHERAPZ  DS    0H                      If zeroing, then zero AP length
         TM    OFFFLAG,X'20'           Zeroing length?
         BZ    WHAPNOZ1                No. Bypass this.
         MVC   LWATAPLN(2),=X'0000'    Move length to LWA
         MVC   SAVETNEW(2),=X'0000'    Save length for message
WHAPNOZ1 DS    0H
*-*-*-*
         B     WHEREXIT                Finished, get out of routine.
*-----------------------------*
WHERNS   DS    0H                      Update NS length
         TM    SHBLFLG,X'01'
         BO    WHERNSSH
         MVC   LWATNSLN(2),TO10LENG    Move length to LWA
         MVC   SAVETNEW(2),TO10LENG    Save length for message
         B     WHERNSE
WHERNSSH DS    0H
         MVC   LWATNSLN(2),ME10LENG    Move length to LWA
         MVC   SAVETNEW(2),ME10LENG    Save length for message
WHERNSE  DS    0H
*-*-*-*
WHERNSZ  DS    0H                      If zeroing, then zero NS length
         TM    OFFFLAG,X'20'           Zeroing length?
         BZ    WHNSNOZ1                No. Bypass this.
         MVC   LWATNSLN(2),=X'0000'    Move length to LWA
         MVC   SAVETNEW(2),=X'0000'    Save length for message
WHNSNOZ1 DS    0H
*-*-*-*
         B     WHEREXIT                Finished, get out of routine.
*-----------------------------*
WHEREXIT DS    0H
         L     R2,SAVER2B              Restore work registers
         L     R3,SAVER3C
         L     R9,SAVER9Q
         BR    R9
         DROP  R2
TABLEID  DC    CL2' '
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
SETSTEPL DS    0H                     Routine to turn on STEPLIB flags
         ST    R9,SAVER9R
         ST    R2,SAVER2C                Save work register
         L     R2,LWAADDR
         USING LWA,R2
SETSWTBL DS    0H                     Check which table we're seeing
         TM    TIDFLAG,X'03'          PC OR PP table?
         BNZ   SETSTEPN               Say nothing changed.
         TM    TIDFLAG,X'20'          E2?
         BO    SETSDOE2
         TM    TIDFLAG,X'10'          E8?
         BO    SETSDOE8
         TM    TIDFLAG,X'80'          AP?
         BO    SETSDOAP
         TM    TIDFLAG,X'40'          NS?
         BO    SETSDONS
SETSDOE2 DS    0H
         OI    LWAPRMLB,LWATE2ST         STEPLIB flag on for E2
         B     SETSWTBE
SETSDOE8 DS    0H
         OI    LWAPRMLB,LWATE8ST         STEPLIB flag on for E8
         B     SETSWTBE
SETSDOAP DS    0H
         OI    LWAPRMLB,LWATAPST         STEPLIB flag on for AP
         B     SETSWTBE
SETSDONS DS    0H
         OI    LWAPRMLB,LWATNSST         STEPLIB flag on for NS
         B     SETSWTBE
SETSWTBE DS    0H                        Print informative message
         MVC   LINE,LINE-1
         APUT  LINE,30
         APUT  MESSAGEC,L'MESSAGEC    Say "before making changes"
         MVC   LINE,LINE-1
         MVC   LINE(71),=C'Table    marked from STEPLIB so PARMLIB UPDA-
               TE(xx) will not overlay it.'
         MVC   LINE+6(2),TABLEID
         APUT  LINE,71
         B     SETSTEPE
SETSTEPN DS    0H
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         APUT  MESSAG2D,L'MESSAG2D   Say nothing changed.
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     SETSTEPE
SETSTEPE DS    0H
         L     R2,SAVER2C             Restore work register
         L     R9,SAVER9R
         DROP  R2
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
NOTSTEPL DS    0H                    Routine to turn off STEPLIB flags
         ST    R9,SAVER9K
         ST    R2,SAVER2C             Save work register
         L     R2,LWAADDR
         USING LWA,R2
NOTSWTBL DS    0H                     Check which table we're seeing
         TM    TIDFLAG,X'03'          PC OR PP table?
         BNZ   NOTSTEPN               Say nothing changed.
         TM    TIDFLAG,X'20'          E2?
         BO    NOTSDOE2
         TM    TIDFLAG,X'10'          E8?
         BO    NOTSDOE8
         TM    TIDFLAG,X'80'          AP?
         BO    NOTSDOAP
         TM    TIDFLAG,X'40'          NS?
         BO    NOTSDONS
NOTSDOE2 DS    0H
         NI    LWAPRMLB,X'FF'-LWATE2ST   STEPLIB flag off for E2
         B     NOTSWTBE
NOTSDOE8 DS    0H
         NI    LWAPRMLB,X'FF'-LWATE8ST   STEPLIB flag off for E8
         B     NOTSWTBE
NOTSDOAP DS    0H
         NI    LWAPRMLB,X'FF'-LWATAPST   STEPLIB flag off for AP
         B     NOTSWTBE
NOTSDONS DS    0H
         NI    LWAPRMLB,X'FF'-LWATNSST   STEPLIB flag off for NS
         B     NOTSWTBE
NOTSWTBE DS    0H                     Print informative message.
         MVC   LINE,LINE-1            Print a blank first.
         APUT  LINE,30
         APUT  MESSAGEC,L'MESSAGEC    Say "before making changes".
         MVC   LINE,LINE-1
         MVC   LINE(71),=C'Table    marked from not from STEPLIB. PARML-
               IB UPDATE(xx) can overlay. '
         MVC   LINE+6(2),TABLEID      Move table name into message.
         APUT  LINE,71
         B     NOTSTEPE
NOTSTEPN DS    0H
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         APUT  MESSAG2D,L'MESSAG2D   Say nothing changed.
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
         B     NOTSTEPE
NOTSTEPE DS    0H
         L     R2,SAVER2C             Restore work register
         L     R9,SAVER9K
         BR    R9
         DROP  R2
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETLPABD DS    0H                  Get storage boundary values for LPA
         ST    R9,SAVER9S
GETLSTRT DS    0H
         ST    R5,SAVER5C          Prepare a bunch of work registers
         ST    R4,SAVER4C          Prepare a bunch of work registers
         L     R5,X'10'            Point to CVT.
         USING CVT,R5              Tell Assembler.
         L     R4,CVTSMEXT         Point to CVT Extension.
         USING CVTVSTGX,R4         Tell Assembler.
         MVC   SAVMLPAS,CVTMLPAS   MLPA start
         MVC   SAVMLPAE,CVTMLPAE   MLPA end
         MVC   SAVFLPAS,CVTFLPAS   FLPA start
         MVC   SAVFLPAE,CVTFLPAE   FLPA end
         MVC   SAVPLPAS,CVTPLPAS   PLPA start
         MVC   SAVPLPAE,CVTPLPAE   PLPA end
         MVC   SAVEMLPS,CVTEMLPS   E-MLPA start
         MVC   SAVEMLPE,CVTEMLPE   E-MLPA end
         MVC   SAVEFLPS,CVTEFLPS   E-FLPA start
         MVC   SAVEFLPE,CVTEFLPE   E-FLPA end
         MVC   SAVEPLPS,CVTEPLPS   E-PLPA start
         MVC   SAVEPLPE,CVTEPLPE   E-PLPA end
         L     R5,SAVER5C          Restore the work registers
         L     R4,SAVER4C          Restore the work registers
         L     R9,SAVER9S
         DROP  R5,R4
         BR    R9                  Return
*                                  Constants needed here.
SAVMLPAS DC    A(0)
SAVMLPAE DC    A(0)
SAVFLPAS DC    A(0)
SAVFLPAE DC    A(0)
SAVPLPAS DC    A(0)
SAVPLPAE DC    A(0)
SAVEMLPS DC    A(0)
SAVEMLPE DC    A(0)
SAVEFLPS DC    A(0)
SAVEFLPE DC    A(0)
SAVEPLPS DC    A(0)
SAVEPLPE DC    A(0)
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
GETLPRNT DS    0H         Routine to Print LPA Range - action code X
         ST    R9,SAVER9T
         TM    LPADFLG,X'01'         Code wasn't X. Don't print.
         BZ    GETLPRTE              Just restore R9 and go on.
         MVC   LINE,LINE-1
         MVC   LINE(28),DASHES28
         APUT  LINE,35
         MVC   LINE,LINE-1
         MVC   LINE(28),=C' --- LPA RANGE DISPLAY ---  '
         APUT  LINE,35
         MVC   LINE,LINE-1
         MVC   LINE(28),DASHES28
         APUT  LINE,35
         MVC   LINE,LINE-1
         MVC   LINE(4),=C'MLPA'
         HEX   LINE+10,4,SAVMLPAS    MLPA range
         HEX   LINE+20,4,SAVMLPAE
         APUT  LINE,35
         MVC   LINE,LINE-1
         MVC   LINE(4),=C'FLPA'
         HEX   LINE+10,4,SAVFLPAS    FLPA range
         HEX   LINE+20,4,SAVFLPAE
         APUT  LINE,35
         MVC   LINE,LINE-1
         MVC   LINE(4),=C'PLPA'      PLPA range
         HEX   LINE+10,4,SAVPLPAS
         HEX   LINE+20,4,SAVPLPAE
         APUT  LINE,35
         MVC   LINE,LINE-1
         MVC   LINE(6),=C'E-MLPA'    E-MLPA range
         HEX   LINE+10,4,SAVEMLPS
         HEX   LINE+20,4,SAVEMLPE
         APUT  LINE,35
         MVC   LINE,LINE-1
         MVC   LINE(6),=C'E-FLPA'    E-FLPA range
         HEX   LINE+10,4,SAVEFLPS
         HEX   LINE+20,4,SAVEFLPE
         APUT  LINE,35
         MVC   LINE,LINE-1
         MVC   LINE(6),=C'E-PLPA'    E-PLPA range
         HEX   LINE+10,4,SAVEPLPS
         HEX   LINE+20,4,SAVEPLPE
         APUT  LINE,35
         MVC   LINE,LINE-1
         MVC   LINE(28),DASHES28     Print row of dashes at the bottom
         APUT  LINE,35
GETLPRTE DS    0H
         L     R9,SAVER9T
         BR    R9
DASHES28 DC    28C'-'
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
PRTABLHD DS    0H
         ST    R9,SAVER9U
*                                 Print out table header
         STM   R14,R1,SAVE1401    Now save registers 14 thru 1.
         L     R1,TABLADDR        Load table start address.
         MVC   DISPHDR(16),0(R1)  Move header info to display area.
         ST    R1,HDRADDR         Store header address for alter
         MVC   LINE,LINE-1        Clear line
         MVC   LINE(15),=C'Table Header:  '  Move in title.
         MVC   LINE+15(16),DISPHDR           Move in title info.
         APUT  LINE,35
         MVC   LINE,LINE-1        Clear line for next time
         LM    R14,R1,SAVE1401    Restore  registers 14 thru 1.
*-*
         L     R9,SAVER9U
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
** ---------------------------------------------------------------- **
**   When this routine is invoked, TABLADDR points to the start     **
**    of the real table.                                            **
** ---------------------------------------------------------------- **
TESTLPA  DS    0H             Test if an address is in any LPA range
         ST    R9,SAVER9W
*-*-*->>                          Print the address out so we can see.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1        Clear line area.
         MVC   LINE(16),=C'Table address:  '
         HEX   LINE+20,4,TABLADDR     Display address in Hex
         APUT  LINE,35
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
*-*-*->>
TESLSTRT DS    0H
         CLC   TABLADDR,SAVMLPAS      Smaller than MLPA start?
         BL    TESLTST1
         CLC   TABLADDR,SAVMLPAE      Larger than MLPA end?
         BH    TESLTST1
         OI    LPAFLAG,X'01'          In between, flag it and exit.
         B     TESLMSG
TESLTST1 DS    0H
         CLC   TABLADDR,SAVFLPAS      Smaller than FLPA start?
         BL    TESLTST2
         CLC   TABLADDR,SAVFLPAE      Larger than FLPA end?
         BH    TESLTST2
         OI    LPAFLAG,X'01'          In between, flag it and exit.
         B     TESLMSG
TESLTST2 DS    0H
         CLC   TABLADDR,SAVPLPAS      Smaller than PLPA start?
         BL    TESLTST3
         CLC   TABLADDR,SAVPLPAE      Larger than PLPA end?
         BH    TESLTST3
         OI    LPAFLAG,X'01'
         B     TESLMSG                In between, flag it and exit.
TESLTST3 DS    0H
         CLC   TABLADDR,SAVEMLPS      Smaller than E-MLPA start?
         BL    TESLTST4
         CLC   TABLADDR,SAVEMLPE      Larger than E-MLPA end?
         BH    TESLTST4
         OI    LPAFLAG,X'01'          In between, flag it and exit.
         B     TESLMSG
TESLTST4 DS    0H
         CLC   TABLADDR,SAVEFLPS      Smaller than E-FLPA start?
         BL    TESLTST5
         CLC   TABLADDR,SAVEFLPE      Larger than E-FLPA end?
         BH    TESLTST5
         OI    LPAFLAG,X'01'          In between, flag it and exit.
         B     TESLMSG
TESLTST5 DS    0H
         CLC   TABLADDR,SAVEPLPS      Smaller than E-PLPA start?
         BL    TESLMSG
         CLC   TABLADDR,SAVEPLPE      Larger than E-PLPA end?
         BH    TESLMSG
         OI    LPAFLAG,X'01'          In between, flag it and exit.
         B     TESLMSG
TESLMSG  DS    0H
*-*-*->>                          Message the result of the LPA test.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1        Clear line area.
         TM    LPAFLAG,X'01'      Is the address within LPA?
         BZ    TESLMSGA           No. Say not.
         MVC   LINE(40),=C'Table address lies within an LPA region.'
         B     TESLMSGP           Go send the message.
TESLMSGA DS    0H
         MVC   LINE(42),=C'Table address is not within an LPA region.'
TESLMSGP DS    0H                 Send the message.
         APUT  LINE,45
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
*-*-*->>
TESLEND  DS    0H
         L     R9,SAVER9W
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
CHANGEDL DS    0H                     Say table was in LPALIB so that
*                                       therefore nothing was changed.
         ST    R9,SAVER9V
         TM    LPAFLAG,X'01'          Table was loaded in the LPALIB
*                                      storage range. Can't change it.
         BZ    CHANGEEN
         APUT  MESSAG2E,L'MESSAG2E    Say that table was from LPALIB.
         APUT  MESSAG2D,L'MESSAG2D    Say that nothing was changed.
CHANGEEN DS    0H
         L     R9,SAVER9V
         BR    R9
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
ENTRYDSP DS    0H
         ST    R9,SAVER9X
         TM    TIDFLAG,X'03'      PC or PP table?
         BNZ   ENTRYEXI           Yes. No display here.
         STM   R14,R1,SAVE1401    Save registers 14 thru 1.
         MVC   LINE,LINE-1
         L     R1,NTRYCNT
         CVD   R1,CVDAREA
         MVC   LINE+22(10),MASK10
         ED    LINE+22(10),CVDAREA+3
         MVC   LINE(24),=C'Non-blank table entries:'
         MVC   LINE+35(25),=C'(these are the ones used)'
         APUT  LINE,65
         MVC   LINE,LINE-1
         L     R1,BLNKCNT
         CVD   R1,CVDAREA
         MVC   LINE+22(10),MASK10
         ED    LINE+22(10),CVDAREA+3
         MVC   LINE(24),=C'Perceived blank entries:'
         MVC   LINE+35(25),=C'(potential for expansion)'
         APUT  LINE,65
         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.
ENTRYEXI DS    0H
         L     R9,SAVER9X
         BR    R9
ENTRYDEN DS    0H
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
** ---------------------------------------------------------------- **
**   Here are the rest of the constants for the program.            **
** ---------------------------------------------------------------- **
BLKSTRNG DC    XL10'00004040404040404040'
ENDSTRNG DC    XL10'FFFF4040404040404040'
ZEROES8  DC    X'0000000000000000'
MASK10   DC    XL10'40202020202020202120'
         DC    C' '
BLANKS   DC    C'                                            '
MESSAGET DC    C'TSUB Command - Display/Change USERID Auth Table Entry -
               - xxxxxxxx'
MESSAGEU DC    C'---- -------   ------- ------ ------ ---- ----- ----- -
                 --------'
MESSAGEC DC    C'  **--------   AFTER MAKING CHANGES   -------**'
MESSAGED DC    C'  **--- STATE BEFORE MAKING TABLE CHANGES ---**'
MESSAG1A DC    C'Table XX pointed to by the LWA has length available. H+
               ex xxxx '
MESSAG1B DC    C'Table XX pointed to by the LWA has no lengths. Blanks +
               will delimit.'
MESSAG1C DC    C'Table XX pointed to by the LWA came from an APF STEPLI+
               B.'
MESSAG1D DC    C'Table XX pointed to by the LWA did not come from an AP+
               F STEPLIB.'
MESSAG2C DC    C'Command was not invoked APF authorized.'
MESSAG2D DC    C'Nothing was changed.  '
MESSAG2E DC    C'Table is in LPALIB, and we will not attempt to alter i+
               t.'
MESSAG3A DC    C'Slot      in XX table has been changed to         .'
MESSAG3B DC    C'Slot      in XX table has been blanked.            '
MESSAG3C DC    C'                                                      +
                  '
MESSAG3D DC    C'Last 8 bytes of table header altered to " PARMLIB". '
MESSAG3E DC    C'LWA size for table    has been changed from Hex xxxx t+
               o Hex xxxx.'
MESSAG3F DC    C'LWA size for table    is now Hex xxxx. '
MESSA11A DC    C'  Supply a table code TT, followed by an action code A-
               .'
MESSA11B DC    C'Supply a program name, as the next parameter.   '
MESSA11C DC    C'Valid table  codes are:  E2, E8, AP, NS, PC, PP. '
MESSA11D DC    C'Valid action codes are:  R - replace, B - blank, D - d-
               isplay,'
MESSA11Z DC    C'  H - header, L - supply full table length, Z - zero t-
               able length,'
MESSA11Y DC    C'  S - mark table from STEPLIB, P - mark table from PAR-
               MLIB,'
MESSA11X DC    C'  X - display LPA storage ranges, M - supply minimum t-
               able length.'
MESSA11E DC    C'Please supply a program name.  '
MESSA11F DC    C'Full command is in the form TTA, TT=table code, A=acti-
               on code.'
MESSA11G DC   C'Please supply slot number to change, and program name.'
MESSA11I DC    C'If D (display) is followed by a slot number, only that-
                slot is shown.'
MESSA11J DC    C'R (replace) requires a slot number, followed by a prog-
               ram name.'
MESSA11K DC    C'If D is not followed by a number, then the entire tabl-
               e is displayed.'
MESSA11L DC    C'  Instructions to use this program:                  '
MESSA11M DC    C'  ------------ -- --- ---- -------                   '
MESSA11N DC    C'B (blank) blanks the slot number given. Higher slots a-
               re invalidated.'
MESSA11O DC    C'D does not need APF authorization. All other codes req-
               uire it.'
MESSA11P DC    C'TSUB TTA nnn pgmname (nnn optional for D, both require-
               d for R)'
MESSA11Q DC    C'Codes: H,L,M,Z,P,S,X do not require extra parameters.'
MESSA12Q DC    C'Please supply slot number to blank out. BE CAREFUL !'
MESSAGR0 DC    C'Return Code = 0 '
MESSAGR4 DC    C'Return Code = 4 '
MESSAGR8 DC    C'Return Code = 8 '
MESSAGRC DC    C'Return Code = 12'
MESSDIAG DC    C'                                            '
MESSAGEP DC    C'No Parmlib-supplied XX table was found in storage. '
MESSAGEN DC    C'Supplied character        was not numeric. '
         SPACE 3
         LTORG
         SPACE 3
CVDAREA  DS    D                   For CVD instruction
SAVEAPUT DS    2D
SAVER23  DS    2F                  Save pair of regs R2, R3
SAVER1A  DS    F                   Save R1 here
SAVER1B  DS    F                   Save R1 here
SAVER2A  DS    F                   Save R2 here
SAVER2B  DS    F                   Save R2 here
SAVER2C  DS    F                   Save R2 here
SAVER2D  DS    F                   Save R2 here
SAVER2E  DS    F                   Save R2 here
SAVER2F  DS    F                   Save R2 here
SAVER2G  DS    F                   Save R2 here
SAVER3A  DS    F                   Save R3 here
SAVER3B  DS    F                   Save R3 here
SAVER3C  DS    F                   Save R3 here
SAVER4A  DS    F                   Save R4 here
SAVER4B  DS    F                   Save R4 here
SAVER4C  DS    F                   Save R4 here
SAVER5A  DS    F                   Save R5 here
SAVER5B  DS    F                   Save R5 here
SAVER5C  DS    F                   Save R5 here
SAVER5D  DS    F                   Save R5 here
SAVER5E  DS    F                   Save R5 here
SAVER5F  DS    F                   Save R5 here
SAVER8A  DS    F                   Save R8 here
SAVER9A  DS    F                   BAL Register Save Area
SAVER9B  DS    F                   BAL Register Save Area
SAVER9C  DS    F                   BAL Register Save Area
SAVER9D  DS    F                   BAL Register Save Area
SAVER9E  DS    F                   BAL Register Save Area
SAVER9F  DS    F                   BAL Register Save Area
SAVER9G  DS    F                   BAL Register Save Area
SAVER9H  DS    F                   BAL Register Save Area
SAVER9I  DS    F                   BAL Register Save Area
SAVER9J  DS    F                   BAL Register Save Area
SAVER9K  DS    F                   BAL Register Save Area
SAVER9L  DS    F                   BAL Register Save Area
SAVER9M  DS    F                   BAL Register Save Area
SAVER9N  DS    F                   BAL Register Save Area
SAVER9O  DS    F                   BAL Register Save Area
SAVER9P  DS    F                   BAL Register Save Area
SAVER9Q  DS    F                   BAL Register Save Area
SAVER9R  DS    F                   BAL Register Save Area
SAVER9S  DS    F                   BAL Register Save Area
SAVER9T  DS    F                   BAL Register Save Area
SAVER9U  DS    F                   BAL Register Save Area
SAVER9V  DS    F                   BAL Register Save Area
SAVER9W  DS    F                   BAL Register Save Area
SAVER9X  DS    F                   BAL Register Save Area
SAVER9Y  DS    F                   BAL Register Save Area
CMBUFEND DS    F                   Number of bytes to end of cmd buff
SAVLSLOT DS    F                   Save place where Key 0 will change
SLOTBIN  DS    F                   Fullword binary value of slot number
SLOTNOW  DS    F                   Slot number being searched
DISPREG  DS    F                   DISPLAY
CMBUFAD  DS    F                   Command Buffer address
CHARSTRT DS    F                   Address of first parm character
CHARCONT DS    F                   Address of next parm character
CHARSIZE DS    F
OURSLOT  DS    F                   Address of current slot searched
FOUNSLOT DS    F
TABLEND  DS    F                   Estimated or real end addr of table
* --- >
TABLSTRT DS    F                   Start address of table
TABLADDR DS    F                   Store address of current table
TABLENUM DS    F                   Number of entries in table
TABLESIZ DS    F                   Size of a table entry
* --- >
BLNKCNT  DS    F
NTRYCNT  DS    F
* --- >
OFFSETSV DS    F
WORKA    DC    D'0'                Work area for CVB
NUMVSTRT DC    X'00'               Character count of first parm
NUMCOUTL DC    X'00'               Entered first parm length
CODEPLAC DS    CL2                 Store entered table code here
PAD01    DS    CL4                 Filler
SAVECHAR DS    X
SAVECH08 DS    X
MEASFLG  DS    X
SHBLFLG  DS    X
OFFFLAG  DS    X                   Are we blanking the last entry?
OLDFLAG  DS    X                   Old system detected if X'01'
TIDFLAG  DS    X                   Which table are we handling.
LPAFLAG  DS    X                   Is the table address in the LPA?
LPADFLG  DS    X                   Do LPA range display.
PLATFLG  DS    X                   FCVE or PPVE exist.
HAVLFLG  DS    X                   Have length of table available
NSCHFLG  DS    X                   Dealing the 10-byte NS table?
LWAPFLG  DS    X                   LWAPRMLB flag copied into program
*              X'80'               LWATAPST TAP came from STEPLIB
*              X'40'               LWATNSST TNS came from STEPLIB
*              X'20'               LWATE2ST TE2 came from STEPLIB
*              X'10'               LWATE8ST TE8 came from STEPLIB
LWAMFLG  DS    X                   Which tables have a size in the LWA.
*              X'80'               AP has a size in the LWA.
*              X'40'               NS has a size in the LWA.
*              X'20'               E2 has a size in the LWA.
*              X'10'               E8 has a size in the LWA.
FLAGZ    DS    X
*              X'01'               Found a blank entry. End table srch.
*              X'02'               Parm number is past the end of table
*              X'04'               Table lengths have been supplied.
PAD02    DS    CL4                 Filler
FSTNAME  DC    CL8' '              Entered program name for "Replace"
FSTCOUNT DS    F                   Number of characters in FSTNAME
FSTCHALF DC    H'0'
PAD03    DS    CL4                 Filler
TABENNUM DC    CL10' '
PAD03A   DS    CL4                 Filler
FSTFIELD DS    0CL8
FSTNUME  DC    CL5' '
FSTNUPAD DC    CL3' '
FSTNOUNT DS    F                   Number of characters in FSTNAME
FSTNHALF DC    H'0'
PAD04    DS    CL4                 Filler
SLOTSAVE DS    CL10
PAD05    DS    CL4                 Filler
SNDNAME  DC    CL8' '
SNDCOUNT DS    F                   Number of characters in SNDNAME
SNDCHALF DC    H'0'
TABCODE  DC    CL8' '              Original OUTLIM character
         DS    CL7                 PADDING
DISPHDR  DS    CL16                Table header display area
         DS    CL1
HDRADDR  DS    F                   Address of table header
CMDBCOPY DS    CL252
         DS    CL128               PADDING
         DS    0F                  ALIGN ON FULLWORD
LINEB    DS    C                   LINE-1
LINE     DS    CL137               Output line area
LINET    EQU   LINE+7              Indented line
LINAB    DS    C                   LINE-1
LINA     DS    CL137               Output line area
LINAT    EQU   LINA+7              Indented line
TRTPGMNM DC    X'02020202020202020202020202020202'
         DC    X'02020202020202020202020202020202'
         DC    X'02020202020202020202020202020202'
         DC    X'02020202020202020202020202020202'
         DC    X'40020202020202020202020202020202'
         DC    X'02020202020202020202025B02020202'
         DC    X'02020202020202020202020202020202'
         DC    X'02020202020202020202027B7C020202'
         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'
         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'
         DC    X'0202E2E3E4E5E6E7E8E9020202020202'
         DC    X'02020202020202020202020202020202'
         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'
         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'
         DC    X'0202E2E3E4E5E6E7E8E9020202020202'
         DC    X'02020202020202020202020202020202'
         SPACE
         IKJCPPL
         IKJPSCB
         CVT      LIST=YES,DSECT=YES
         IKJTSVT
         IKJEFLWA
         END
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
